<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Link Yan</title>
  <updated>2013-05-18T12:46:39+08:00</updated>
  <id>/</id>
  <author>
    <name>Link Yan</name>
    <email>wsyanligang@gmail.com</email>
  </author>

  
  <entry>
    <title>ActiveAndroid--Android轻量级ORM框架</title>
    <link href="///2013/05/17/about-activeandroid.html"/>
    <updated>2013-05-17T00:00:00+08:00</updated>
    <id>///2013/05/17/about-activeandroid</id>
    <content type="html">&lt;p&gt;Github:&lt;a href=&quot;https://github.com/pardom/ActiveAndroid&quot;&gt;ActiveAndroid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ActiveAndroid算是一个轻量级的ORM框架，简单地通过如save()和delete()等方法来做到增删改查等操作。配置起来也还算简单。&lt;/p&gt;

&lt;p&gt;下面是作者的原话：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ActiveAndroid is an active record style ORM (object relational mapper). What does that mean exactly? Well, ActiveAndroid allows you to save and retrieve SQLite database records without ever writing a single SQL statement. Each database record is wrapped neatly into a class with methods like save() and delete().&lt;/p&gt;

&lt;p&gt;ActiveAndroid does so much more than this though. Accessing the database is a hassle, to say the least, in Android. ActiveAndroid takes care of all the setup and messy stuff, and all with just a few simple steps of configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;开始&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;在AndroidManifest.xml中我们需要添加这两个&lt;meta-data&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AA_DB_NAME&lt;/code&gt; (这个name不能改，但是是可选的，如果不写的话 是默认的&amp;quot;Application.db&amp;quot;这个值）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AA_DB_VERSION&lt;/code&gt; (optional – defaults to 1)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;com.activeandroid.app.Application&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        ...
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta-data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;AA_DB_NAME&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;your.db&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta-data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;AA_DB_VERSION&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这个&lt;code&gt;&amp;lt;application&amp;gt;&lt;/code&gt;是必须指定的，但你也可以使用自己的Application,继承自&lt;code&gt;com.activeandroid.app.Application&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApplication&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activeandroid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果你不想或者不能继承&lt;code&gt;com.activeandroid.app.Application&lt;/code&gt;的话，那么就这样&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApplication&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeLibraryApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ActiveAndroid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onTerminate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onTerminate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ActiveAndroid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ActiveAndroid.initialize(this)；&lt;/code&gt;做初始化工作，&lt;code&gt;ActiveAndroid.dispose();&lt;/code&gt;做清理工作&lt;/p&gt;

&lt;h2&gt;创建数据库模型&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;我们使用&lt;code&gt;@Table(name = &amp;quot;Items&amp;quot;)&lt;/code&gt;来表示表，使用&lt;code&gt;@Column(name = &amp;quot;Name&amp;quot;)&lt;/code&gt;来表示列，ActiveAndroid会使用自增长的ID作为主键，然后按照注解描述，将类对应映射为数据库表。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;@Table(name = &amp;quot;Items&amp;quot;)
public class Item extends Model {
    @Column(name = &amp;quot;Name&amp;quot;)
    public String name;
    @Column(name = &amp;quot;Category&amp;quot;)
    public Category category;
        public Item(){
                super();
        }
        public Item(String name, Category category){
                super();
                this.name = name;
                this.category = category;
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;依赖关系的数据库表&lt;/h3&gt;

&lt;p&gt;假如Item和Category是多对一的关系，那么我们可以这样子创建他们的类&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;@Table(name = &amp;quot;Items&amp;quot;)
public class Item extends Model {
    @Column(name = &amp;quot;Name&amp;quot;)
    public String name;
    @Column(name = &amp;quot;Category&amp;quot;)
    public Category category;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;@Table(name = &amp;quot;Categories&amp;quot;)
public class Category extends Model {
    @Column(name = &amp;quot;Name&amp;quot;)
    public String name;
    public List&amp;lt;Item&amp;gt; items() {
        return getMany(Item.class, &amp;quot;Category&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;如何保存和更新数据到数据库&lt;/h2&gt;

&lt;hr&gt;

&lt;h3&gt;单挑插入&lt;/h3&gt;

&lt;p&gt;保存Category对象&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;Category restaurants = new Category();
restaurants.name = &amp;quot;Restaurants&amp;quot;;
restaurants.save();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分配了一个category并且保存到数据库
&lt;code&gt;
Item item = new Item();
item.category = restaurants;
item.name = &amp;quot;Outback Steakhouse&amp;quot;;
item.save();
&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;批量插入&lt;/h3&gt;

&lt;p&gt;如果你要批量插入数据，最好使用事务(transaction)。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;ActiveAndroid.beginTransaction();
try {
        for (int i = 0; i &amp;lt; 100; i++) {
            Item item = new Item();
            item.name = &amp;quot;Example &amp;quot; + i;
            item.save();
        }
        ActiveAndroid.setTransactionSuccessful();
}
finally {
        ActiveAndroid.endTransaction();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用事务的话只用了 40ms，不然的话需要4秒。&lt;/p&gt;

&lt;h3&gt;删除记录&lt;/h3&gt;

&lt;p&gt;我们有三种方式删除一条记录&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;Item item = Item.load(Item.class, 1);
item.delete();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;Item.delete(Item.class, 1);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;new Delete().from(Item.class).where(&amp;quot;Id = ?&amp;quot;, 1).execute();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很简单吧&lt;/p&gt;

&lt;h2&gt;查询数据库&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;作者将查询做的非常像SQLite的原生查询语句，几乎涵盖了所有的指令
com.activeandroid.query包下有以下类&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Delete&lt;/li&gt;
&lt;li&gt;From&lt;/li&gt;
&lt;li&gt;Join&lt;/li&gt;
&lt;li&gt;Select&lt;/li&gt;
&lt;li&gt;Set&lt;/li&gt;
&lt;li&gt;Update&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们举例说明吧&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public static Item getRandom(Category category) {
    return new Select()
        .from(Item.class)
        .where(&amp;quot;Category = ?&amp;quot;, category.getId())
        .orderBy(&amp;quot;RANDOM()&amp;quot;)
        .executeSingle();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对应的sqlite查询语句就是 &lt;code&gt;select * from Item where Category = ? order by RANDOM()&lt;/code&gt;
当然还支持其他非常多的指令&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;limit&lt;/li&gt;
&lt;li&gt;offset&lt;/li&gt;
&lt;li&gt;as&lt;/li&gt;
&lt;li&gt;desc/asc&lt;/li&gt;
&lt;li&gt;inner/outer/cross join&lt;/li&gt;
&lt;li&gt;group by&lt;/li&gt;
&lt;li&gt;having 
等等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大家可以在&lt;strong&gt;ActiveAndroid项目下的tests工程&lt;/strong&gt;找到测试用例，有非常多详细的描述。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Android开发者指南之App Widgets (译)</title>
    <link href="///2013/05/15/app-widget.html"/>
    <updated>2013-05-15T00:00:00+08:00</updated>
    <id>///2013/05/15/app-widget</id>
    <content type="html">&lt;p&gt;App Widgets是一种能嵌入到其他应用程序(如Home screen)的小型应用程序界面，并且能接收定时的更新。这些视图被称为用户界面中的窗口小部件，需要App Widget provider才能发布.能持有其他App Widgets的应用组件叫做App Widget host.下面显示了一张Music App Widget的图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://developer.android.com/images/appwidgets/appwidget.png&quot; alt=&quot;music app widget&quot;&gt;&lt;/p&gt;

&lt;p&gt;本文档将描述如何使用App Widget provider发布一个App Widget。&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;Widget Design&lt;/h4&gt;

&lt;p&gt;更多关于如何设计你的app widget,你可以阅读这篇 &lt;a href=&quot;http://developer.android.com/design/patterns/widgets.html&quot;&gt;窗口小部件设计指导&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;基础&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;创建一个App Widget ，你需要以下条件:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AppWidgetProviderInfo 对象。用来描述App Widget的元数据，比如App Widget的布局，更新频率，AppWidgetProvider类。也可以使用xml定义。&lt;/li&gt;
&lt;li&gt;AppWidgetProvider 类实例。定义了一些基本方法，需要你去实现这些接口，是基于广播(broadcast)事件的。通过它，你可以接收到什么时候App Widget被更新了，可使用，不可使用和被删除了等状态。&lt;/li&gt;
&lt;li&gt;界面布局。定义了为App Widget初始化的布局，定义在XML中。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;此外，你可以实现一个App Widget配置Activity。这个可选的Activity的主要作用是，当用户在启动器(launches)中添加了你的App Widget时允许他在创建的时候就修改App Widget的设置。&lt;/p&gt;

&lt;p&gt;以下各节描述了如何设置每个组件&lt;/p&gt;

&lt;h2&gt;在Manifest中声明一个App Widget&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;首先，在你应用程序的AndroidManifest.xml文件中声明AppWidgetProvider类，像这样:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;&amp;lt;receiver android:name=&amp;quot;ExampleAppWidgetProvider&amp;quot; &amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&amp;quot;android.appwidget.action.APPWIDGET_UPDATE&amp;quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
    &amp;lt;meta-data android:name=&amp;quot;android.appwidget.provider&amp;quot;
               android:resource=&amp;quot;@xml/example_appwidget_info&amp;quot; /&amp;gt;
&amp;lt;/receiver&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;receiver&amp;gt;&lt;/code&gt;元素需要android:name属性，用来指定App Widget所使用的AppWidgetProvider。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;intent-filter&amp;gt;&lt;/code&gt;元素必须包含一个带有android:name属性的&lt;code&gt;&amp;lt;action&amp;gt;&lt;/code&gt;元素。这个属性指定了AppWidgetProvider接收&lt;code&gt;ACTION_APPWIDGET_UPDATE&lt;/code&gt;广播。这是你必须要显示声明的广播。AppWidgetManager会自动发生其他所有的App Widget广播到AppWidgetProvider中，如果有必要的话。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;meta-data&amp;gt;&lt;/code&gt;元素指定了AppWidgetProviderInfo的来源并且要求有以下属性：
- android:name-指定元数据名称。使用&lt;code&gt;android.appwidget.provider&lt;/code&gt;作为AppWidgetProviderInfo的描述来识别数据
- android:resource-指定AppWidgetProviderInfo的本地来源&lt;/p&gt;

&lt;h2&gt;添加AppWidgetProviderInfo 元数据&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;AppWidgetProviderInfo定义了一个App Widget必要的特性（qualities），例如最小的布局尺寸，初始布局资源，多久更新一次App Widget，创建时调用的配置Activity。可以使用单个&lt;code&gt;&amp;lt;appwidget-provider&amp;gt;&lt;/code&gt;元素的XML资源来定义AppWidgetProviderInfo对象，然后保持到项目的&lt;code&gt;res/xml/&lt;/code&gt;文件夹下。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;&amp;lt;appwidget-provider xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:minWidth=&amp;quot;294dp&amp;quot;
    android:minHeight=&amp;quot;72dp&amp;quot;
    android:updatePeriodMillis=&amp;quot;86400000&amp;quot;
    android:previewImage=&amp;quot;@drawable/preview&amp;quot;
    android:initialLayout=&amp;quot;@layout/example_appwidget&amp;quot;
    android:configure=&amp;quot;com.example.android.ExampleAppWidgetConfigure&amp;quot; 
    android:resizeMode=&amp;quot;horizontal|vertical&amp;quot;
    android:widgetCategory=&amp;quot;home_screen|keyguard&amp;quot;
    android:initialKeyguardLayout=&amp;quot;@layout/example_keyguard&amp;quot;&amp;gt;
&amp;lt;/appwidget-provider&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于&lt;code&gt;&amp;lt;appwidget-provider&amp;gt;&lt;/code&gt;属性的一些总结:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;miniWidth&lt;/code&gt;和&lt;code&gt;minHeight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minResizeWidth&lt;/code&gt;和&lt;code&gt;minResizeHeight&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;updatePeriodMillis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialLayout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;perviewImage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autoAdvanceViewId&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resizeMode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;widgetCategory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;initialKeyguardLayout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于更多`&lt;appwidget-provider&gt;可以接收的属性的相关信息，可以查看&lt;a href=&quot;http://developer.android.com/reference/android/appwidget/AppWidgetProviderInfo.html&quot;&gt;AppWidgetProviderInfo&lt;/a&gt;类。&lt;/p&gt;

&lt;h2&gt;创建App Widget布局&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;你必须将你的App Widget初始化布局定义在XML中，并且将它保存在项目的&lt;code&gt;res/layout/&lt;/code&gt;目录下。你可以使用下面列表列出的视图对象来设计你的App Widget,但是在你设计你的App Widget前，请先阅读并理解&lt;a href=&quot;http://developer.android.com/guide/practices/ui_guidelines/widget_design.html&quot;&gt;App Widget Design Guidelines&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;创建一个App Widget布局是很简单的，如果你很了解&lt;a href=&quot;http://developer.android.com/guide/topics/ui/declaring-layout.html&quot;&gt;Layouts&lt;/a&gt;的话。但是你应该意识到App Widget是基于&lt;a href=&quot;http://developer.android.com/reference/android/widget/RemoteViews.html&quot;&gt;RemoteViews&lt;/a&gt;的，它不支持所有类型的布局和控件(view widget)。&lt;/p&gt;

&lt;p&gt;一个RemoteViews对象(consequently 一个App Widget)可以支持以下的布局类:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FrameLayout&lt;/li&gt;
&lt;li&gt;LinearLayout&lt;/li&gt;
&lt;li&gt;RelativeLayout&lt;/li&gt;
&lt;li&gt;GridLayout&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;和以下控件类:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AnalogClock&lt;/li&gt;
&lt;li&gt;Button&lt;/li&gt;
&lt;li&gt;Chronometer&lt;/li&gt;
&lt;li&gt;ImageButton&lt;/li&gt;
&lt;li&gt;ImageView&lt;/li&gt;
&lt;li&gt;ProgressBar&lt;/li&gt;
&lt;li&gt;TextView&lt;/li&gt;
&lt;li&gt;ViewFlipper&lt;/li&gt;
&lt;li&gt;ListView&lt;/li&gt;
&lt;li&gt;GridView&lt;/li&gt;
&lt;li&gt;StackView&lt;/li&gt;
&lt;li&gt;AdapterViewFlipper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些类的派生类(Descendants)是不支持的。&lt;/p&gt;

&lt;p&gt;RemoteViews 也支持 ViewStub,一种不可见，不占大小的视图，你可以在运行时延迟&lt;code&gt;inflate&lt;/code&gt;布局资源&lt;/p&gt;

&lt;h3&gt;为App Widget添加margins&lt;/h3&gt;

&lt;h2&gt;使用AppWidgetProvider类&lt;/h2&gt;

&lt;hr&gt;

&lt;h3&gt;接收App Widget广播意图 (broadcast intents)&lt;/h3&gt;

&lt;h2&gt;创建一个App Widget配置Activity&lt;/h2&gt;

&lt;hr&gt;

&lt;h3&gt;从配置Activity更新App Widget&lt;/h3&gt;

&lt;h2&gt;设置预览图片&lt;/h2&gt;

&lt;hr&gt;

&lt;h2&gt;使App Widget在锁屏上可用&lt;/h2&gt;

&lt;hr&gt;

&lt;h3&gt;改变大小指导&lt;/h3&gt;

&lt;h2&gt;使用带有集合的App Widget&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Android 3.0引进了带有集合的App Widget。这种App Widget使用RemoteViewService去显示那些支持远程数据的集合,例如从content provider。由RemoteViewsService提供的数据展示在App Widget中使用了以下视图类型中的一种,我们称之为&amp;quot;collections views&amp;quot;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ListView:A view that shows items in a vertically scrolling list. For an example, see the Gmail app widget.&lt;/li&gt;
&lt;li&gt;GridView:A view that shows items in two-dimensional scrolling grid. For an example, see the Bookmarks app widget.&lt;/li&gt;
&lt;li&gt;StackView:A stacked card view (kind of like a rolodex), where the user can flick the front card up/down to see the previous/next card, respectively. Examples include the YouTube and Books app widgets. &lt;/li&gt;
&lt;li&gt;AdapterViewFlipper:An adapter-backed simple ViewAnimator that animates between two or more views. Only one child is shown at a time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正如上文所述,这些collections views显示支持远程数据的集合。这意味着他们使用Adpater将接口和数据
绑定一起。Adapter绑定将特殊items从一些集合的数据绑定到特殊的视图对象上。因为这些collection views被adapters支持，所以Android框架必须包含额外的体系结构去支持他们在app widget中使用。在app widget的上下文中，adapter被代替为RemoteViewsFactory,仅仅是简单的对Adapter接口进行了薄封装。当请求在集合中一个具体的item，RemoteViewsFactory会为集合创建并返回RemoteViews对象作为Item。为了能在你的app widget中使用collection view，你必须实现RemoteViewService和RemoteViewsFactory。&lt;/p&gt;

&lt;p&gt;RemoteViewsService是一种允许一个远程adapter请求RemoteViews对象的service。
RemoteViewsFactory是一种为collections view（如ListView,GridView等）和视图中潜在数据做适配的接口。下面这段模板代码,你可以用实现service和interface，从StackView Widget sample中提取出来的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class StackWidgetService extends RemoteViewsService {
    @Override
    public RemoteViewsFactory onGetViewFactory(Intent intent) {
        return new StackRemoteViewsFactory(this.getApplicationContext(), intent);
    }
}
class StackRemoteViewsFactory implements RemoteViewsService.RemoteViewsFactory {
//... include adapter-like methods here. See the StackView Widget sample.
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;例子应用&lt;/h3&gt;

&lt;p&gt;本节的代码片段取材至StackView Widget sample:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://developer.android.com/images/appwidgets/StackWidget.png&quot; alt=&quot;sample&quot;&gt;&lt;/p&gt;

&lt;p&gt;例子有十个栈视图组成，从&amp;quot;0!&amp;quot;显示到&amp;quot;9!&amp;quot;。这个例子app widget有以下主要行为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;用户可以垂直方向甩动在app widget的顶部View，来显示上一个或者下一个view。这是内建在StackView的行为。&lt;/li&gt;
&lt;li&gt;Without any user interaction, the app widget automatically advances through its views in sequence, like a slide show. This is due to the setting android:autoAdvanceViewId=&amp;quot;@id/stack_view&amp;quot; in the res/xml/stackwidgetinfo.xml file. This setting applies to the view ID, which in this case is the view ID of the stack view.&lt;/li&gt;
&lt;li&gt;If the user touches the top view, the app widget displays the Toast message &amp;quot;Touched view n,&amp;quot; where n is the index (position) of the touched view. For more discussion of how this is implemented, see Adding behavior to individual items.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;实现带有集合的App Widget&lt;/h3&gt;

&lt;p&gt;To implement an App Widget with collections, you follow the same basic steps you would use to implement any app widget. The following sections describe the additional steps you need to perform to implement an App Widget with collections.&lt;/p&gt;

&lt;h3&gt;带有集合的App Widget的清单&lt;/h3&gt;

&lt;p&gt;In addition to the requirements listed in Declaring an App Widget in the Manifest, to make it possible for App Widgets with collections to bind to your RemoteViewsService, you must declare the service in your manifest file with the permission BIND_REMOTEVIEWS. This prevents other applications from freely accessing your app widget&amp;#39;s data. For example, when creating an App Widget that uses RemoteViewsService to populate a collection view, the manifest entry may look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;&amp;lt;service android:name=&amp;quot;MyWidgetService&amp;quot;
...
android:permission=&amp;quot;android.permission.BIND_REMOTEVIEWS&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The line &lt;code&gt;android:name=&amp;quot;MyWidgetService&amp;quot;&lt;/code&gt; refers to your subclass of RemoteViewsService.&lt;/p&gt;

&lt;h3&gt;带有集合的App Widget的布局&lt;/h3&gt;

&lt;p&gt;The main requirement for your app widget layout XML file is that it include one of the collection views: ListView, GridView, StackView, or AdapterViewFlipper. Here is the widget_layout.xml for the StackView Widget sample:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;FrameLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt;
    &amp;lt;StackView xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
        android:id=&amp;quot;@+id/stack_view&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;match_parent&amp;quot;
        android:gravity=&amp;quot;center&amp;quot;
        android:loopViews=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;TextView xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
        android:id=&amp;quot;@+id/empty_view&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;match_parent&amp;quot;
        android:gravity=&amp;quot;center&amp;quot;
        android:background=&amp;quot;@drawable/widget_item_background&amp;quot;
        android:textColor=&amp;quot;#ffffff&amp;quot;
        android:textStyle=&amp;quot;bold&amp;quot;
        android:text=&amp;quot;@string/empty_view_text&amp;quot;
        android:textSize=&amp;quot;20sp&amp;quot; /&amp;gt;
&amp;lt;/FrameLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that empty views must be siblings of the collection view for which the empty view represents empty state.&lt;/p&gt;

&lt;p&gt;In addition to the layout file for your entire app widget, you must create another layout file that defines the layout for each item in the collection (for example, a layout for each book in a collection of books). For example, the StackView Widget sample only has one layout file, widget&lt;em&gt;item.xml, since all items use the same layout. But the WeatherListWidget sample has two layout files: dark&lt;/em&gt;widget&lt;em&gt;item.xml and light&lt;/em&gt;widget_item.xml.&lt;/p&gt;

&lt;h3&gt;带有集合的App Widget的AppWidgetProvider&lt;/h3&gt;

&lt;p&gt;As with a regular app widget, the bulk of your code in your AppWidgetProvider subclass typically goes in onUpdate(). The major difference in your implementation for onUpdate() when creating an app widget with collections is that you must call setRemoteAdapter(). This tells the collection view where to get its data. The RemoteViewsService can then return your implementation of RemoteViewsFactory, and the widget can serve up the appropriate data. When you call this method, you must pass an intent that points to your implementation of RemoteViewsService and the App Widget ID that specifies the app widget to update.&lt;/p&gt;

&lt;p&gt;For example, here&amp;#39;s how the StackView Widget sample implements the onUpdate() callback method to set the RemoteViewsService as the remote adapter for the app widget collection:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public void onUpdate(Context context, AppWidgetManager appWidgetManager,
int[] appWidgetIds) {
    // update each of the app widgets with the remote adapter
    for (int i = 0; i &amp;lt; appWidgetIds.length; ++i) {     
        // Set up the intent that starts the StackViewService, which will
        // provide the views for this collection.
        Intent intent = new Intent(context, StackWidgetService.class);
        // Add the app widget ID to the intent extras.
        intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetIds[i]);
        intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
        // Instantiate the RemoteViews object for the App Widget layout.
        RemoteViews rv = new RemoteViews(context.getPackageName(), R.layout.widget_layout);
        // Set up the RemoteViews object to use a RemoteViews adapter. 
        // This adapter connects
        // to a RemoteViewsService  through the specified intent.
        // This is how you populate the data.
        rv.setRemoteAdapter(appWidgetIds[i], R.id.stack_view, intent);       
        // The empty view is displayed when the collection has no items. 
        // It should be in the same layout used to instantiate the RemoteViews
        // object above.
        rv.setEmptyView(R.id.stack_view, R.id.empty_view);
        //
        // Do additional processing specific to this app widget...
        //     
        appWidgetManager.updateAppWidget(appWidgetIds[i], rv);   
    }
    super.onUpdate(context, appWidgetManager, appWidgetIds);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;RemoteViewsService类&lt;/h3&gt;

&lt;p&gt;As described above, your RemoteViewsService subclass provides the RemoteViewsFactory used to populate the remote collection view.&lt;/p&gt;

&lt;p&gt;Specifically, you need to perform these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Subclass RemoteViewsService. RemoteViewsService is the service through which a remote adapter can request RemoteViews.&lt;/li&gt;
&lt;li&gt;In your RemoteViewsService subclass, include a class that implements the RemoteViewsFactory interface. RemoteViewsFactory is an interface for an adapter between a remote collection view (such as ListView, GridView, and so on) and the underlying data for that view. Your implementation is responsible for making a RemoteViews object for each item in the data set. This interface is a thin wrapper around Adapter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The primary contents of the RemoteViewsService implementation is its RemoteViewsFactory, described below.&lt;/p&gt;

&lt;h3&gt;RemoteViewsFactory接口&lt;/h3&gt;

&lt;p&gt;Your custom class that implements the RemoteViewsFactory interface provides the app widget with the data for the items in its collection. To do this, it combines your app widget item XML layout file with a source of data. This source of data could be anything from a database to a simple array. In the StackView Widget sample, the data source is an array of WidgetItems. The RemoteViewsFactory functions as an adapter to glue the data to the remote collection view.&lt;/p&gt;

&lt;p&gt;The two most important methods you need to implement for your RemoteViewsFactory subclass are onCreate() and getViewAt() .&lt;/p&gt;

&lt;p&gt;The system calls onCreate() when creating your factory for the first time. This is where you set up any connections and/or cursors to your data source. For example, the StackView Widget sample uses onCreate() to initialize an array of WidgetItem objects. When your app widget is active, the system accesses these objects using their index position in the array and the text they contain is displayed&lt;/p&gt;

&lt;p&gt;Here is an excerpt from the StackView Widget sample&amp;#39;s RemoteViewsFactory implementation that shows portions of the onCreate() method:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;class StackRemoteViewsFactory implements
RemoteViewsService.RemoteViewsFactory {
    private static final int mCount = 10;
    private List&amp;lt;WidgetItem&amp;gt; mWidgetItems = new ArrayList&amp;lt;WidgetItem&amp;gt;();
    private Context mContext;
    private int mAppWidgetId;
    public StackRemoteViewsFactory(Context context, Intent intent) {
        mContext = context;
        mAppWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,
                AppWidgetManager.INVALID_APPWIDGET_ID);
    }
    public void onCreate() {
        // In onCreate() you setup any connections / cursors to your data source. Heavy lifting,
        // for example downloading or creating content etc, should be deferred to onDataSetChanged()
        // or getViewAt(). Taking more than 20 seconds in this call will result in an ANR.
        for (int i = 0; i &amp;lt; mCount; i++) {
            mWidgetItems.add(new WidgetItem(i + &amp;quot;!&amp;quot;));
        }
        ...
    }
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The RemoteViewsFactory method getViewAt() returns a RemoteViews object corresponding to the data at the specified position in the data set. Here is an excerpt from the StackView Widget sample&amp;#39;s RemoteViewsFactory implementation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public RemoteViews getViewAt(int position) {
    // Construct a remote views item based on the app widget item XML file, 
    // and set the text based on the position.
    RemoteViews rv = new RemoteViews(mContext.getPackageName(), R.layout.widget_item);
    rv.setTextViewText(R.id.widget_item, mWidgetItems.get(position).text);
    ...
    // Return the remote views object.
    return rv;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;为个别Item添加行为&lt;/h3&gt;

&lt;p&gt;The above sections show you how to bind your data to your app widget collection. But what if you want to add dynamic behavior to the individual items in your collection view?&lt;/p&gt;

&lt;p&gt;As described in Using the AppWidgetProvider Class, you normally use setOnClickPendingIntent() to set an object&amp;#39;s click behavior—such as to cause a button to launch an Activity. But this approach is not allowed for child views in an individual collection item (to clarify, you could use setOnClickPendingIntent() to set up a global button in the Gmail app widget that launches the app, for example, but not on the individual list items). Instead, to add click behavior to individual items in a collection, you use setOnClickFillInIntent(). This entails setting up up a pending intent template for your collection view, and then setting a fill-in intent on each item in the collection via your RemoteViewsFactory.&lt;/p&gt;

&lt;p&gt;This section uses the StackView Widget sample to describe how to add behavior to individual items. In the StackView Widget sample, if the user touches the top view, the app widget displays the Toast message &amp;quot;Touched view n,&amp;quot; where n is the index (position) of the touched view. This is how it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The StackWidgetProvider (an AppWidgetProvider subclass) creates a pending intent that has a custom action called TOAST_ACTION.&lt;/li&gt;
&lt;li&gt;When the user touches a view, the intent is fired and it broadcasts TOAST_ACTION.&lt;/li&gt;
&lt;li&gt;This broadcast is intercepted by the StackWidgetProvider&amp;#39;s onReceive() method, and the app widget displays the Toast message for the touched view. The data for the collection items is provided by the RemoteViewsFactory, via the RemoteViewsService.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The StackView Widget sample uses a broadcast, but typically an app widget would simply launch an activity in a scenario like this one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;设置待定意图模板(pending intent template)&lt;/h4&gt;

&lt;p&gt;StackWidgetProvider（AppWidgetProvider子类）设置了一个待定意图.集合中具体的Item不能单独设置属于他们自己的待定意图。(注：性能原因) 取而代之的，集合作为一个整体设置一个待定意图模板，然后具体的Item设置填充意图(fill-in intent)来创建在item-by-item
The StackWidgetProvider (AppWidgetProvider subclass) sets up a pending intent. Individuals items of a collection cannot set up their own pending intents. Instead, the collection as a whole sets up a pending intent template, and the individual items set a fill-in intent to create unique behavior on an item-by-item basis.&lt;/p&gt;

&lt;p&gt;This class also receives the broadcast that is sent when the user touches a view. It processes this event in its onReceive() method. If the intent&amp;#39;s action is TOAST_ACTION, the app widget displays a Toast message for the current view.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class StackWidgetProvider extends AppWidgetProvider {
    public static final String TOAST_ACTION = &amp;quot;com.example.android.stackwidget.TOAST_ACTION&amp;quot;;
    public static final String EXTRA_ITEM = &amp;quot;com.example.android.stackwidget.EXTRA_ITEM&amp;quot;;
    ...
    // Called when the BroadcastReceiver receives an Intent broadcast.
    // Checks to see whether the intent&amp;#39;s action is TOAST_ACTION. If it is, the app widget 
    // displays a Toast message for the current item.
    @Override
    public void onReceive(Context context, Intent intent) {
        AppWidgetManager mgr = AppWidgetManager.getInstance(context);
        if (intent.getAction().equals(TOAST_ACTION)) {
            int appWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,
                AppWidgetManager.INVALID_APPWIDGET_ID);
            int viewIndex = intent.getIntExtra(EXTRA_ITEM, 0);
            Toast.makeText(context, &amp;quot;Touched view &amp;quot; + viewIndex, Toast.LENGTH_SHORT).show();
        }
        super.onReceive(context, intent);
    }
    @Override
    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
        // update each of the app widgets with the remote adapter
        for (int i = 0; i &amp;lt; appWidgetIds.length; ++i) {
            // Sets up the intent that points to the StackViewService that will
            // provide the views for this collection.
            Intent intent = new Intent(context, StackWidgetService.class);
            intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetIds[i]);
            // When intents are compared, the extras are ignored, so we need to embed the extras
            // into the data so that the extras will not be ignored.
            intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
            RemoteViews rv = new RemoteViews(context.getPackageName(), R.layout.widget_layout);
            rv.setRemoteAdapter(appWidgetIds[i], R.id.stack_view, intent);
            // The empty view is displayed when the collection has no items. It should be a sibling
            // of the collection view.
            rv.setEmptyView(R.id.stack_view, R.id.empty_view);
            // This section makes it possible for items to have individualized behavior.
            // It does this by setting up a pending intent template. Individuals items of a collection
            // cannot set up their own pending intents. Instead, the collection as a whole sets
            // up a pending intent template, and the individual items set a fillInIntent
            // to create unique behavior on an item-by-item basis.
            Intent toastIntent = new Intent(context, StackWidgetProvider.class);
            // Set the action for the intent.
            // When the user touches a particular view, it will have the effect of
            // broadcasting TOAST_ACTION.
            toastIntent.setAction(StackWidgetProvider.TOAST_ACTION);
            toastIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetIds[i]);
            intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
            PendingIntent toastPendingIntent = PendingIntent.getBroadcast(context, 0, toastIntent,
                PendingIntent.FLAG_UPDATE_CURRENT);
            rv.setPendingIntentTemplate(R.id.stack_view, toastPendingIntent);
            appWidgetManager.updateAppWidget(appWidgetIds[i], rv);
        }
    super.onUpdate(context, appWidgetManager, appWidgetIds);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;设置填充意图(fill-in intent)&lt;/h4&gt;

&lt;p&gt;你的RemoteViewsFactory必须为每一个在集合中的item设置一个填充意图(fill-in intent)。这样才可能做到区分给定的Item单独的点击动作。填充意图然后与待定意图模板(PendingItent template)结合一起，确定了当item被点击时将执行的最终意图。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class StackWidgetService extends RemoteViewsService {
    @Override
    public RemoteViewsFactory onGetViewFactory(Intent intent) {
        return new StackRemoteViewsFactory(this.getApplicationContext(), intent);
    }
}
class StackRemoteViewsFactory implements RemoteViewsService.RemoteViewsFactory {
    private static final int mCount = 10;
    private List&amp;lt;WidgetItem&amp;gt; mWidgetItems = new ArrayList&amp;lt;WidgetItem&amp;gt;();
    private Context mContext;
    private int mAppWidgetId;
    public StackRemoteViewsFactory(Context context, Intent intent) {
        mContext = context;
        mAppWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,
                AppWidgetManager.INVALID_APPWIDGET_ID);
    }
    // 初始化数据
        public void onCreate() {
            // 在 onCreate()你可以建立任何连接/游标 到你的源数据中.Heavy lifting.
            // 如下载或者创建内容等，应该延迟到onDataSetChanged()方法中
            // 或者 getViewAt(), 在这个回调中耗时超过20秒，将会引起ANR.
            for (int i = 0; i &amp;lt; mCount; i++) {
                mWidgetItems.add(new WidgetItem(i + &amp;quot;!&amp;quot;));
            }
           ...
        }
        ...
        // Given the position (index) of a WidgetItem in the array, use the item&amp;#39;s text value in 
        // combination with the app widget item XML file to construct a RemoteViews object.
        public RemoteViews getViewAt(int position) {
            // position will always range from 0 to getCount() - 1.
            // Construct a RemoteViews item based on the app widget item XML file, and set the
            // text based on the position.
            RemoteViews rv = new RemoteViews(mContext.getPackageName(), R.layout.widget_item);
            rv.setTextViewText(R.id.widget_item, mWidgetItems.get(position).text);
            // Next, set a fill-intent, which will be used to fill in the pending intent template
            // that is set on the collection view in StackWidgetProvider.
            Bundle extras = new Bundle();
            extras.putInt(StackWidgetProvider.EXTRA_ITEM, position);
            Intent fillInIntent = new Intent();
            fillInIntent.putExtras(extras);
            // Make it possible to distinguish the individual on-click
            // action of a given item
            rv.setOnClickFillInIntent(R.id.widget_item, fillInIntent);
            ...
            // Return the RemoteViews object.
            return rv;
        }
    ...
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;保持集合数据最新&lt;/h2&gt;

&lt;p&gt;下面的流程图发生在一个使用了集合的App Widget更新数据时。它展示了App Widget代码与RemoteViewsFactory的交互，以及你如何触发更新。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://developer.android.com/images/appwidgets/appwidget_collections.png&quot; alt=&quot;fresh data&quot;&gt;&lt;/p&gt;

&lt;p&gt;使用了集合的App Widgets的其中一个特性就是可以为用户提供最新的内容。例如，Android 3.0 Gmail app widget，可以为用户提供他们收件箱的一个快照。为了做到这一点，你需要能触发你的RemoteViewsFactory和集合view,去获得并且显示新数据。你可以通过使用AppWidgetManager调用notifyAppWidgetViewDataChanged()来实现这一点。然后在你的RemoteViewsFactory的OnDataChanged()获得一个回调结果，一个你有机会可以获取任何新数据的回调接口。注意，你可以在onDataSetChanged()回调方法中执行密集的同步操作(processing-intensive operations synchronously)。回调方法在元数据或者视图数据从RemoteViewsFactory那里获取之前以及被执行完成，所以你可以放心。此外，你也可以在getViewAt()方法内执行密集的同步操作。&lt;strong&gt;如果这个回调函数执行了很长时间，那么加载视图(RemoteViewsFactory中指定的getLoadingView()方法)将被显示在集合视图中正确的位置，直到它返回结果.&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Link HttpClient 介绍</title>
    <link href="///2013/05/14/link-httpclient.html"/>
    <updated>2013-05-14T00:00:00+08:00</updated>
    <id>///2013/05/14/link-httpclient</id>
    <content type="html"></content>
  </entry>
  
  <entry>
    <title>程序算法与人生选择</title>
    <link href="///2013/05/14/lifealgorithm.html"/>
    <updated>2013-05-14T00:00:00+08:00</updated>
    <id>///2013/05/14/lifealgorithm</id>
    <content type="html">&lt;p&gt;每年一到要找工作的时候，我就能收到很多人给我发来的邮件，总是问我怎么选择他们的offer，去腾讯还是去豆瓣，去外企还是去国内的企业，去创业还是去考研，来北京还是回老家，该不该去创新工场？该不该去thoughtworks？……等等，等等。今年从7月份到现在，我收到并回复了60多封这样的邮件。我更多帮他们整理思路，帮他们明白自己最想要的是什么。（注：我以后不再回复类似的邮件了）。&lt;/p&gt;

&lt;p&gt;我深深地发现，对于我国这样从小被父母和老师安排各种事情长大的人，当有一天，父母和老师都跟不上的时候，我们几乎完全不知道怎么去做选择。而我最近也离开了亚马逊，换了一个工作。又正值年底，就像去年的那篇&lt;a href=&quot;http://coolshell.cn/articles/6142.html&quot;&gt;《三个故事和三个问题》&lt;/a&gt;一样，让我想到写一篇这样的文章。&lt;/p&gt;

&lt;h2&gt;几个例子&lt;/h2&gt;

&lt;p&gt;当我们在面对各种对选择的影响因子的时候，如：城市，公司规模，公司性质，薪水，项目，户口，技术，方向，眼界…… 你总会发现，你会在几个公司中纠结一些东西，举几个例子：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;某网友和我说，他们去上海腾讯，因为腾讯的规模很大，但却发现薪水待遇没有豆瓣高（低的还不是一点），如果以后要换工作的话，起薪点直接关系到了以后的高工资。我说那就去豆瓣吧，他说豆瓣在北京，污染那么严重，又没有户口，生存环境不好。我说去腾讯吧，他说腾讯最近组织调整，不稳定。我说那就去豆瓣吧，慢公司，发展很稳当。他说，豆瓣的盈利不清楚，而且用Python，自己不喜欢。我说，那就去腾讯吧，……&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还有一网友和我说，他想回老家，因为老家的人脉关系比较好，能混得好。但又想留在大城市，因为大城市可以开眼界。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另一网友和我说，他想进外企，练练英语，开开眼界，但是又怕在外企里当个螺丝钉，想法得不到实施。朋友拉他去创业，觉得创业挺好的，锻炼大，但是朋友做的那个不知道能不能做好。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还有一网友在创新工场的某团队和考研之间抉择，不知道去创新工场行不行，觉得那个项目一般，但是感觉那个团队挺有激情的，另一方面觉得自己的学历还不够，读个研应该能找到更好的工作。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还有一些朋友问题我应该学什么技术？不应该学什么技术？或是怎么学会学得最快，技术的路径应该是什么？有的说只做后端不做前端，有的说，只做算法研究，不做工程，等等，等等。因为他们觉得人生有限，术业有专攻。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等等，等等……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我个人觉得，如果是非计算机科班出生的人不会做选择，不知道怎么走也罢了，但是我们计算机科班出生的人是学过算法的，&lt;strong&gt;懂算法的人应该是知道怎么做选择的。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;排序算法&lt;/h2&gt;

&lt;p&gt;你不可能要所有的东西，所以你只能要你最重要的东西，你要知道什么东西最重要，你就需要对你心内的那些欲望和抱负有清楚的认识，不然，你就会在纠结中度过。&lt;/p&gt;

&lt;p&gt;所以，在选择中纠结的人有必要参考一下排序算法。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先，你最需要参考的就是“冒泡排序”——这种算法的思路就是每次冒泡出一个最大的数。所以，你有必要问问你自己，面对那些影响你选择的因子，如果你只能要一个的话，你会要哪个？而剩下的都可以放弃。于是，当你把最大的数，一个一个冒泡出来的时候，并用这个决策因子来过滤选项的时候，你就能比较容易地知道知道你应该选什么了。&lt;strong&gt;这个算法告诉我们，人的杂念越少，就越容易做出选择。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;好吧，可能你已茫然到了怎么比较两个决策因子的大小，比如：你分不清楚，工资&amp;gt;业务前景吗？业务前景&amp;gt;能力提升吗？所以你完全没有办法进行冒泡法。那你，你不妨参考一个“快速排序”的思路——这个算法告诉我们，我们一开始并不需要找到最大的数，我们只需要把你价值观中的某个标准拿出来，然后，把可以满足这个价值的放到右边，不能的放到左边去。比如，你的标准是：工资大于5000元&amp;amp;&amp;amp;业务前景长于3年的公司，你可以用这个标准来过滤你的选项。然后，你可以再调整这个标准再继续递归下去。&lt;strong&gt;这个算法告诉我们，我们的选择标准越清晰，我们就越容易做出选择。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是排序算法中最经典的两个算法了，面试必考。相信你已烂熟于心中了。所以，我觉得你把这个算法应用于你的人生选择也应该不是什么问题。关于在于，你是否知道自己想要的是什么？&lt;/p&gt;

&lt;p&gt;排序算法的核心思想就是，让你帮助你认清自己最需要的是什么，认清自己最想要的是什么，然后根据这个去做选择。&lt;/p&gt;

&lt;h2&gt;贪婪算法&lt;/h2&gt;

&lt;p&gt;所谓贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择（注意：是当前状态下），从而希望导致结果是最好或最优的算法。贪婪算法最经典的一个例子就是哈夫曼编码。&lt;/p&gt;

&lt;p&gt;对于人类来说，一般人在行为处事的时候都会使用到贪婪算法，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;比如在找零钱的时候，如果要找补36元，我们一般会按这样的顺序找钱：20元，10元，5元，1元。&lt;/li&gt;
&lt;li&gt;或者我们在过十字路口的时候，要从到对角线的那个街区时，我们也会使用贪婪算法——哪边的绿灯先亮了我们就先过到那边去，然后再转身90度等红灯再过街。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样的例子有很多。对于选择中，大多数人都会选用贪婪算法，因为这是一个比较简单的算法，未来太复杂了，只能走一步看一步，在当前的状况下做出最利于自己的判断和选择即可。&lt;/p&gt;

&lt;p&gt;有的人会贪婪薪水，有的人会贪婪做的项目，有的人会贪婪业务，有的人会贪婪职位，有的人会贪婪自己的兴趣……这些都没什么问题。贪婪算法并没有错，虽然不是全局最优解，但其可以让你找到局部最优解或是次优解。其实，有次优解也不错了。&lt;strong&gt;贪婪算法基本上是一种急功近利的算法，但是并不代表这种算法不好，如果贪婪的是一种长远和持续，又未尝不可呢？。&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;动态规划&lt;/h2&gt;

&lt;p&gt;但是我们知道，对于大部分的问题，贪婪法通常都不能找出最优解，因为他们一般没有测试所有可能的解。&lt;strong&gt;因为贪婪算法是一种短视的行为，只会跟据当前的形式做判断，也就是过早做决定，因而没法达到最佳解。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;动态规划和贪婪算法的最大不同是，贪婪算法做出选择，不能回退。动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。&lt;/p&gt;

&lt;p&gt;动态规划算法至少告诉我们两个事：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;承前启后非常重要&lt;/strong&gt;，当你准备去做遍历的时候，你的上次的经历不但能开启你以后的经历，而且还能为后面的经历所用。你的每一步都没有浪费。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;是否可以回退也很重要。&lt;/strong&gt;这意思是——如果你面前有两个选择，一个是A公司一个是B公司，如果今天你错失了B公司，那到你明天还能不能找回来？&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;比如说：你有两个offer，一个是Yahoo，一个是Baidu，上述的第一点会让我们思考，Yahoo和Baidu谁能给我们开启更大的平台？上述的第二点告诉我们，是进入Yahoo后如果没有选好，是否还能回退到Baidu公司？还是进入Baidu公司后能容易回退到Yahoo公司？&lt;/p&gt;

&lt;h2&gt;Dijkstra最短路径&lt;/h2&gt;

&lt;p&gt;最短路径是一个Greedy + DP的算法。相当经典。这个算法的大意如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在初始化的时候，所有的结点都和我是无穷大，默认是达不到的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从离自己最近的结点开始贪婪。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;走过去，看看又能到达什么样的结点，计算并更新到所有目标点的距离。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再贪婪与原点最短的结点，如此反复。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个算法给我们带来了一些这样的启示：&lt;/p&gt;

&lt;p&gt;有朋友和我说过他想成为一个架构师，或是某技术领域的专家，并会踏踏实实的向这个目标前进，永不放弃。我还是鼓励了他，但我也告诉他了这个著名的算法，我说，这个算法告诉你，架构师或某领域的专家对你来说目前的距离是无穷大，他们放在心中，先看看你能够得着的东西。&lt;strong&gt;所谓踏实，并不是踏踏实实追求你的目标，而是踏踏实实把你够得着看得见的就在身边的东西干好。&lt;/strong&gt;我还记得我刚参加工作，从老家出来的时候，从来没有想过要成为一个技术牛人，也从来没有想过我的博客会那么的有影响力，在做自己力所能及，看得见摸得着的事情，我就看见什么技术就学什么，学着学着就知道怎么学更轻松，怎么学更扎实，这也许就是我的最短路径。
有很多朋友问我要不要学C++，或是问我学Python还是学Ruby，是不是不用学前端，等等。这些朋友告诉我，他们不可能学习多个语言，学了不用也就忘了，而且术业有专攻。这并没有什么不对的，只是我个人觉得，学习一个东西没有必要只有两种状态，一种是不学，另一种是精通。了解一个技术其实花不了多少时间，我学C++的目的其实是为了更懂Java，学TCP/IP协议其实是为了更懂Socket编程，很多东西都是连通和相辅相成的，学好了C/C++/Unix/TCP等这些基础技术后，我发现到达别的技术路径一下缩短了（这就是为什么&lt;a href=&quot;http://coolshell.cn/articles/8489.html&quot;&gt;我用两天时间就可以了解Go语言的原因&lt;/a&gt;）。这就好像这个算法一样，算法效率不高，也许达到你的目标，你在一开始花了很长时间，遍历了很多地方，但是，这也许这就是你的最短路径。&lt;/p&gt;

&lt;h2&gt;算法就是Trade-Off&lt;/h2&gt;

&lt;p&gt;你根本没有办法能得到所有你想得到的东西，&lt;strong&gt;任何的选择都意味着放弃——当你要去获得一个东西的时候，你总是需要放弃一些东西。人生本来就是一个跷跷板，一头上，另一头必然下。&lt;/strong&gt;这和我们做软件设计或算法设计一样，用时间换空间，用空间换时间，还有CAP理论，总是有很多的Trade-Off，正如这个短语的原意一样——&lt;strong&gt;你总是要用某种东西去交易某种东西。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们都在用某种东西在交易我们的未来，有的人用自己的努力，有的人用自己的思考，有的人用自己的年轻，有的人用自己的自由，有的人用自己的价值观，有的人用自己的道德…… …… 有的人在交换金钱，有的人在交换眼界，有的人在交换经历，有的人在交换地位，有的人在交换能力，有的人在交换自由，有的人在交换兴趣，有的人在交换虚荣心，在交换安逸享乐…… ……&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;每个人有每个人的算法，每个算法都有每个算法的purpose，就算大家在用同样的算法，但是每个人算法中的那些变量、开关和条件都不一样，得到的结果也不一样。我们就是生活在Matrix里的一段程序，我们每个人的算法决定着我们每个人的选择，我们的选择决定了我们的人生。&lt;/strong&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;http://coolshell.cn/articles/8790.html&quot;&gt;原文连接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;非常喜欢这篇文章就转过来，时时督促自己！ &lt;/p&gt;

&lt;h3&gt;我的算法是什么？我的目标是什么？&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/wsyanligang_v/CRnsVx3l/3Zin9.jpg&quot; alt=&quot;car &quot;&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lazy ListView--细化ListView加载图片策略</title>
    <link href="///2013/05/14/lazylistview.html"/>
    <updated>2013-05-14T00:00:00+08:00</updated>
    <id>///2013/05/14/lazylistview</id>
    <content type="html">&lt;p&gt;使用ListView控件来加载图片时，我们一般会使用异步加载的方式。但是如果我们滑动过快的话，可能会超出AsyncTask最大128个线程的限制，然后报异常，FC。于是我们可以使用&lt;code&gt;setOnScrollListener(…)&lt;/code&gt;监听当ScrollState变为&lt;code&gt;SCROLL_STAT_IDLE&lt;/code&gt;时我们再触发图片加载，&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Android-Universal-Image-Loader&lt;/a&gt; 有实现这样的逻辑。&lt;/p&gt;

&lt;p&gt;但是我将细化这个加载策略&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ScrollState==SCROLL&lt;em&gt;STATE&lt;/em&gt;TOUCH_SCROLL（我们手指触摸屏幕，拖动ListView滑动） 时，我们和往常一样创建加载任务，并且显示图片，我们定义为普通加载模式。&lt;/li&gt;
&lt;li&gt;ScrollState==SCROLL&lt;em&gt;STATE&lt;/em&gt;FLING （ListView在滑动，但是我们手指已经离开了屏幕，ListView出去 Fling 状态）时，图片停止加载。我们定义为延迟加载模式。&lt;/li&gt;
&lt;li&gt;ScrollState==SCROLL&lt;em&gt;STATE&lt;/em&gt;IDEL，这时候ListView滑动停止，我们根据不同的加载模式，有不同的策略。&lt;/li&gt;
&lt;li&gt;在普通加载模式下，图片逐张被加载显示出来。&lt;/li&gt;
&lt;li&gt;在延迟加载模式下，LazyAdapter中会回调onLazyLoad 并带有两个参数：

&lt;ol&gt;
&lt;li&gt;firstVisibleItem&lt;/li&gt;
&lt;li&gt;lastVisibleItem&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Adapter需要根据这两个变量来创建加载图片任务，并显示。我们需要继承LazyAdapter类。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public abstract class LazyAdapter extends BaseAdapter {
    ...
    public abstract void onLazyLoad(int first, int last);
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LazyListView 中监听ScrollState是这样实现的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class LazyListView extends ListView implements AbsListView.OnScrollListener {
    . . .
    private int mFirstCount;
    private int mVisibleCount;
    private LazyAdapter mLazyAdapter;
    @Override
    public void onScrollStateChanged(AbsListView view, int scrollState) {
        // TODO Auto-generated method stub
        if (scrollState == SCROLL_STATE_IDLE) {
            mLazyAdapter.onLazyLoad(mFirstCount, mVisibleCount + mFirstCount);
        }
    }
    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
        // TODO Auto-generated method stub
        mFirstCount = firstVisibleItem;
        mVisibleCount = visibleItemCount;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着我们需要LazyAapater维持两个变量&lt;code&gt;isFirstLoad&lt;/code&gt;和&lt;code&gt;mCurrentScrollState&lt;/code&gt;
一个用来标记是否第一次加载，一个用来记录当前的ScrollState。在调用&lt;code&gt;notifyDataSetChanged()&lt;/code&gt;时，还需要重新标记为第一次加载状态，这是因为它不会触发ScrollState改变。&lt;/p&gt;

&lt;p&gt;所以完整版的LazyAdapter是这样的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public abstract class LazyAdapter extends BaseAdapter {
    private boolean isFirstLoad;
    private int mCurrentScrollState;
    public void setFirstLoad(boolean isFirstLoad) {
        this.isFirstLoad = isFirstLoad;
    }
    public boolean isFirstLoad() {
        return isFirstLoad;
    }
    public void resetFirstLoad() {
        this.isFirstLoad = true;
    }
    public void setScrollState(int state) {
        this.mCurrentScrollState = state;
    }
    public boolean isTouchScroll() {
        return mCurrentScrollState == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL;
    }
    @Override
    public void notifyDataSetChanged() {
        // TODO Auto-generated method stub
        resetFirstLoad();
        super.notifyDataSetChanged();
    }
    public abstract void onLazyLoad(int first, int last);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在LazyListView调用&lt;code&gt;setAdapter()&lt;/code&gt;时，我们需要类型检测下，并且将LazyAdapter设为第一次加载状态.
然后完成版的LazyListView是这样的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class LazyListView extends ListView implements AbsListView.OnScrollListener {
    public LazyListView(Context context) {
        super(context);
        setOnScrollListener(this);
    }
    public LazyListView(Context context, AttributeSet attrs) {
        super(context, attrs);
        setOnScrollListener(this);
    }
    public LazyListView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        setOnScrollListener(this);
    }
    private int mFirstCount;
    private int mVisibleCount;
    private LazyAdapter mLazyAdapter;
    @Override
    public void setAdapter(ListAdapter adapter) {
        if (adapter instanceof LazyAdapter) {
            mLazyAdapter = (LazyAdapter) adapter;
            mLazyAdapter.setFirstLoad(true);
            super.setAdapter(adapter);
        } else {
            throw new IllegalArgumentException(&amp;quot;The adapter must be LazyAdapter&amp;quot;);
        }
    }
    @Override
    public void onScrollStateChanged(AbsListView view, int scrollState) {
        // TODO Auto-generated method stub
        if (scrollState == SCROLL_STATE_IDLE) {
            mLazyAdapter.onLazyLoad(mFirstCount, mVisibleCount + mFirstCount);
        }
        if (mLazyAdapter.isFirstLoad()) {
            if (scrollState == SCROLL_STATE_TOUCH_SCROLL) {
                mLazyAdapter.setFirstLoad(false);
            }
        }
        mLazyAdapter.setScrollState(scrollState);
    }
    @Override
    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
        mFirstCount = firstVisibleItem;
        mVisibleCount = visibleItemCount;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着看看我们如何使用：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class DemoAdapter extends LazyAdapter {
    private SparseArray&amp;lt;LKImageView&amp;gt; mLazyImgs;
    @Override
    public void onLazyLoad(int first, int last) {
        //ToDo
        for (int i = first - 2; i &amp;lt; last + 2; i++) {      
            LKImageView img = mLazyImgs.get(i);
            if (img != null) {
                DisplayOptions options=…
                img.displayWithMemory(options);
            }
        }
        mLazyImgs.clear();
    }
    @Override
    public View getView(int position, View cv, ViewGroup viewGroup) {
        …
        Holder holder=…
        DisplayOptions options=…
        if(isFirstLoad()){
            holder.mImg.display(options);
        }else{
            if(isTouchScroll()){
                holder.mImg.display(options);
            }else{
                if(holder.mImg.tryDisplayWithMemory(options)){
                    mLazyImgs.append(position,holder.mImg);
                }
            }
        }
        . . . 
        return view;  //ToDo
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LKImageView 是继承自ImageView类，并扩展了很多附加功能的控件，可以实现内存/磁盘缓存，显示功能==&amp;gt;Link-ImageLoader
现在我们只要知道：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public void display(DisplayOptions options);&lt;/code&gt; 异步加载图片的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public boolean tryDisplayWithMemory(DisplayOptions options);&lt;/code&gt;尝试从内存中同步加载图片的方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在onLazyLoad()中 &lt;code&gt;for (int i = first - 2; i &amp;lt; last + 2; i++)&lt;/code&gt; 
分别-2和+2，可以做到不仅仅加载当前屏幕的可见范围，还可以多加载几个，不做调整也是没有关系的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;并且&lt;code&gt;mLazyImgs.clear()&lt;/code&gt;在结束是必须要调用的，不然会有问题。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在就去尝试下吧，你可以下载我们的这个应用 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://lh4.ggpht.com/EUP4NTyHIMdWZsMgYX5w2kgIE3e3JE5Ud_Yx7tkeYOj8AALgSS2TUYoW92V-dQvVyVM=w124&quot; height=50&gt;&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.huaban.wallpaper&amp;amp;feature=search_result#?t=W251bGwsMSwxLDEsImNvbS5odWFiYW4ud2FsbHBhcGVyIl0.&quot;&gt;壁纸控&lt;/a&gt; ，里面使用了这套加载策略。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CountDownLatch</title>
    <link href="///2013/05/14/countdownlatch.html"/>
    <updated>2013-05-14T00:00:00+08:00</updated>
    <id>///2013/05/14/countdownlatch</id>
    <content type="html">&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;class TaskProtion implements Runnable {
    private static int counter = 0;
    private final int id = counter++;
    private static Random rand = new Random(47);
    private final CountDownLatch latch;

    TaskProtion(CountDownLatch latch) {
        this.latch = latch;
    }

    @Override
    public void run() {
        //ToDo
        try {
            dowork();
            latch.countDown();
        } catch (InterruptedException e) {
            e.printStackTrace(); 
        }
    }

    public void dowork() throws InterruptedException {
        TimeUnit.MILLISECONDS.sleep(rand.nextInt(2000));
        System.out.println(this + &amp;quot;completed&amp;quot;);
    }

    @Override
    public String toString() {
        return String.format(&amp;quot;%1$-3d&amp;quot;, id);
    }
}

class WaitingTask implements Runnable {
    private static int counter = 0;
    private final int id = counter++;
    private final CountDownLatch latch;

    WaitingTask(CountDownLatch latch) {
        this.latch = latch;
    }

    @Override
    public void run() {
        //ToDo
        try {
            latch.await();
            System.out.println(&amp;quot;Latch barrier passed for &amp;quot; + this);
        } catch (InterruptedException e) {
            e.printStackTrace(); 
        }
    }

    @Override
    public String toString() {
        return String.format(&amp;quot;WaitingTask %1$-3d &amp;quot;, id);
    }
}

public class CountDownLatchDemo {
    static final int SIZE = 100;

    public static void main(String[] args) throws Exception {
        ExecutorService exec = Executors.newCachedThreadPool();
        CountDownLatch latch = new CountDownLatch(SIZE);

        for (int i = 0; i &amp;lt; 10; i++) {
            exec.execute(new WaitingTask(latch));
        }
        for (int i = 0; i &amp;lt; SIZE; i++) {
            exec.execute(new TaskProtion(latch));
        }

        System.out.println(&amp;quot;Launched all tasks &amp;quot;);
        exec.shutdown();

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>Only you , Max</title>
    <link href="///2013/05/14/about-max.html"/>
    <updated>2013-05-14T00:00:00+08:00</updated>
    <id>///2013/05/14/about-max</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/wsyanligang_v/CRm8eppG/iHOfk.gif&quot; height=250&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/wsyanligang_v/CRm92mXq/XN3Ho.jpg&quot; height=250&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/wsyanligang_v/CRm9QIR5/zxpuJ.jpg&quot; height=250&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>正太到不行~ (大图)</title>
    <link href="///2013/05/13/yino.html"/>
    <updated>2013-05-13T00:00:00+08:00</updated>
    <id>///2013/05/13/yino</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/wsyanligang_v/CRbeVLHq/3JJtY.png&quot; alt=&quot;Car&quot; title=&quot;小正太&quot;&gt;&lt;/p&gt;

&lt;p&gt;如需合作，请联系 &lt;a href=&quot;http://www.weibo.com/u/1825090347&quot;&gt;@颜乐环&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>介绍开源项目 Android-Universal-Image-Loader -Part 1</title>
    <link href="///2013/05/13/android-universal-image-loader.html"/>
    <updated>2013-05-13T00:00:00+08:00</updated>
    <id>///2013/05/13/android-universal-image-loader</id>
    <content type="html">&lt;p&gt;Github地址：&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;Android-Universal-Image-Loader&lt;/a&gt; 万能的图片加载器!&lt;br&gt;
作者：&lt;a href=&quot;https://github.com/nostra13&quot;&gt;nostra13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;废话不多开始介绍&lt;/p&gt;

&lt;p&gt;This project aims to provide a reusable instrument for asynchronous image loading, caching and displaying. It is originally based on Fedor Vlasov&amp;#39;s project and has been vastly refactored and improved since then.&lt;/p&gt;

&lt;p&gt;作者说他也是&lt;a href=&quot;https://github.com/thest1/LazyList&quot;&gt;Fedor Vlasov&amp;#39;s project&lt;/a&gt;这个项目改写过来的，做到对图片的异步加载，缓存和显示。&lt;/p&gt;

&lt;h2&gt;特性&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;多线程图片加载&lt;/li&gt;
&lt;li&gt;尽可能多的配置选项（线程池，加载器，解析器，内存/磁盘缓存，显示参数等等）&lt;/li&gt;
&lt;li&gt;图片可以缓存在内存中，或者设备文件目录下，或者SD卡中&lt;/li&gt;
&lt;li&gt;可以监听加载进度&lt;/li&gt;
&lt;li&gt;可以自定义显示每一张图片时都带不同参数&lt;/li&gt;
&lt;li&gt;支持Widget&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Quick Setup&lt;/h2&gt;

&lt;h3&gt;1.Include library&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/downloads/universal-image-loader-1.8.4-with-sources.jar&quot;&gt;下载连接 JAR&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;2.Android Manifest&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;&amp;lt;manifest&amp;gt;
    &amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot; /&amp;gt;
    &amp;lt;!-- Include next permission if you want to allow UIL to cache images on SD card --&amp;gt;
    &amp;lt;uses-permission android:name=&amp;quot;android.permission.WRITE_EXTERNAL_STORAGE&amp;quot; /&amp;gt;
    ...
    &amp;lt;application android:name=&amp;quot;MyApplication&amp;quot;&amp;gt;
        ...
    &amp;lt;/application&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3. Application class&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class MyApplication extends Application {
    @Override
    public void onCreate() {
        super.onCreate();
        // Create global configuration and initialize ImageLoader with this configuration
        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())
            ...
            .build();
        ImageLoader.getInstance().init(config);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Configuration and Display Options&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Configuration(ImageLoaderConfiguration) 是相对于整个应用的配置&lt;/li&gt;
&lt;li&gt;Display Options(DisplayImageOptions)是针对每一个显示图片任务所提供的参数(ImageLoader.displayImage(…)).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Configuration&lt;/h3&gt;

&lt;p&gt;所有的选项都是可选的，只选择你真正想制定的去配置。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;// DON&amp;#39;T COPY THIS CODE TO YOUR PROJECT! This is just example of ALL options using.
File cacheDir = StorageUtils.getCacheDirectory(context);
ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)
        //如果图片尺寸大于了这个参数，那么就会这按照这个参数对图片大小进行限制并缓存
        .memoryCacheExtraOptions(480, 800) // default=device screen dimensions
        .discCacheExtraOptions(480, 800, CompressFormat.JPEG, 75)
        .taskExecutor(AsyncTask.THREAD_POOL_EXECUTOR)
        .taskExecutorForCachedImages(AsyncTask.THREAD_POOL_EXECUTOR)
        .threadPoolSize(3) // default
        .threadPriority(Thread.NORM_PRIORITY - 1) // default
        .tasksProcessingOrder(QueueProcessingType.FIFO) // default
        .denyCacheImageMultipleSizesInMemory()
        .memoryCache(new LruMemoryCache(2 * 1024 * 1024))
        .memoryCacheSize(2 * 1024 * 1024)
        .discCache(new UnlimitedDiscCache(cacheDir)) // default
        .discCacheSize(50 * 1024 * 1024)
        .discCacheFileCount(100)
        .discCacheFileNameGenerator(new HashCodeFileNameGenerator()) // default
        .imageDownloader(new BaseImageDownloader(context)) // default
        .imageDecoder(new BaseImageDecoder()) // default
        .defaultDisplayImageOptions(DisplayImageOptions.createSimple()) // default
        .enableLogging()
        .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数主要包括了这么几类配置
1. 线程池配置
2. 内存缓存配置
3. 磁盘缓存配置
4. 使用哪个图片下载器
5. 使用哪个图片解析器
实际上，不做任何配置也是ImageLoader也是可以使用的。
插一句，配置选项的确够丰富，但有多是没有必要的。&lt;/p&gt;

&lt;h3&gt;Display Options&lt;/h3&gt;

&lt;p&gt;显示参数可以分别被每一个显示任务调用(ImageLoader.displayImage(…))&lt;/p&gt;

&lt;p&gt;Note:&lt;strong&gt;如果没有调用ImageLoader.displayImage(…),那么将使用配置选项中的默认显示参数(ImageLoaderConfiguration.defaultDisplayImageOptions(…))&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;DisplayImageOptions options = new DisplayImageOptions.Builder()
        .showStubImage(R.drawable.ic_stub)  // 在显示真正的图片前，会加载这个资源
        .showImageForEmptyUri(R.drawable.ic_empty) //空的Url时
        .showImageOnFail(R.drawable.ic_error) 
        .resetViewBeforeLoading() // 
        .delayBeforeLoading(1000)     // 延长1000ms 加载图片  （想不出来用在什么场景下）
        .cacheInMemory()              
        .cacheOnDisc()               
        .preProcessor(...)            
        .postProcessor(...)           
        .extraForDownloader(...)      //可以向加载器携带一些参数 
        .imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2) // default  
        .bitmapConfig(Bitmap.Config.ARGB_8888) // default
        .decodingOptions(...)
        .displayer(new SimpleBitmapDisplayer()) // default
        .handler(new Handler()) // default
        .build();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;用法&lt;/h2&gt;

&lt;h3&gt;可接收的URL&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;String imageUri = &amp;quot;http://site.com/image.png&amp;quot;; // from Web
String imageUri = &amp;quot;file:///mnt/sdcard/image.png&amp;quot;; // from SD card
String imageUri = &amp;quot;content://media/external/audio/albumart/13&amp;quot;; // from content provider
String imageUri = &amp;quot;assets://image.png&amp;quot;; // from assets
String imageUri = &amp;quot;drawable://&amp;quot; + R.drawable.image; // from drawables (only imag
es, non-9patch)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;例子&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;// Load image, decode it to Bitmap and display Bitmap in ImageView
imageLoader.displayImage(imageUri, imageView);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;// Load image, decode it to Bitmap and return Bitmap to callback
imageLoader.loadImage(imageUri, new SimpleImageLoadingListener() {
    @Override
    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
        // Do whatever you want with Bitmap
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;完整版&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;// Load image, decode it to Bitmap and display Bitmap in ImageView
imageLoader.displayImage(imageUri, imageView, displayOptions, new ImageLoadingListener() {
    @Override
    public void onLoadingStarted(String imageUri, View view) {
        ...
    }
    @Override
    public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
        ...
    }
    @Override
    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
        ...
    }
    @Override
    public void onLoadingCancelled(String imageUri, View view) {
        ...
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;ImageSize targetSize = new ImageSize(120, 80); // result Bitmap will be fit to this size
imageLoader.loadImage(imageUri, targetSize, displayOptions, new SimpleImageLoadingListener() {
    @Override
    public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
        // Do whatever you want with Bitmap
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;ImageLoader Helpers&lt;/h3&gt;

&lt;p&gt;一些可能会用到的帮助类和方法&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;ImageLoader |
            | - getMemoryCache()
            | - clearMemoryCache()
            | - getDiscCache()
            | - clearDiscCache()
            | - denyNetworkDownloads(boolean)
            | - handleSlowNetwork(boolean)
            | - pause()
            | - resume()
            | - stop()
            | - destroy()
            | - getLoadingUriForView(ImageView)
            | - cancelDisplayTask(ImageView)
MemoryCacheUtil |
                | - findCachedBitmapsForImageUri(...)
                | - findCacheKeysForImageUri(...)
                | - removeFromCache(...)
DiscCacheUtil |
              | - findInCache(...)
              | - removeFromCache(...)
StorageUtils |
             | - getCacheDirectory(Context)
             | - getIndividualCacheDirectory(Context)
             | - getOwnCacheDirectory(Context, String)
PauseOnScrollListener
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Useful Info&lt;/h2&gt;

&lt;p&gt;1.使用默认值时缓存无效。如果你想要加载图片的时候使用内存/磁盘中的缓存，那么你应该这样设置DisplayImageOptions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;// Create default options which will be used for every 
//  displayImage(...) call if no options will be passed to this method
DisplayImageOptions defaultOptions = new DisplayImageOptions.Builder()
        ...
        .cacheInMemory()
        .cacheOnDisc()
        ...
        .build();
ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())
        ...
        .defaultDisplayImageOptions(defaultOptions)
        ...
        .build();
ImageLoader.getInstance().init(config); // Do it on Application start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;// Then later, when you want to display image
ImageLoader.getInstance().displayImage(imageUrl, imageView); // Default options will be used
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者这样:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;DisplayImageOptions options = new DisplayImageOptions.Builder()
        ...
        .cacheInMemory()
        .cacheOnDisc()
        ...
        .build();
ImageLoader.getInstance().displayImage(imageUrl, imageView, options); // Incoming options will be used
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.如果你允许缓存在磁盘中，那么UIL将尝试缓存到(/sdcard/Android/data/[package_name]/cache)路径中。如果外部存储不可用的话，图片将缓存在设备文件系统下。为了支持在外部存储(SD card）中缓存,那么应该在AndroidManifest.xml中加上这个权限:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.WRITE_EXTERNAL_STORAGE&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.UIL如果知道Bitmap应该有多大的尺寸放在确定了点ImageView中？它搜索以下几个定义的参数：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;从ImageView测量准确的高和宽获得&lt;/li&gt;
&lt;li&gt;从android:layout&lt;em&gt;width 和 android:layout&lt;/em&gt;height 参数获得&lt;/li&gt;
&lt;li&gt;从 android:maxWidth 和/或者 android:maxHeight 参数获得&lt;/li&gt;
&lt;li&gt;从在configuration定义的maximun width 和/或者 height参数获得&lt;/li&gt;
&lt;li&gt;从设备屏幕 width 和/或者 height 获得&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you often got OutOfMemoryError in your app using Universal Image Loader then try next (all of them or several):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce thread pool size in configuration (.threadPoolSize(...)). 1 - 5 is recommended.&lt;/li&gt;
&lt;li&gt;Use .bitmapConfig(Bitmap.Config.RGB&lt;em&gt;565) in display options. Bitmaps in RGB&lt;/em&gt;565 consume 2 times less memory than in ARGB_8888.&lt;/li&gt;
&lt;li&gt;Use .memoryCache(new WeakMemoryCache()) in configuration or disable caching in memory at all in display options (don&amp;#39;t call .cacheInMemory()).&lt;/li&gt;
&lt;li&gt;Use .imageScaleType(ImageScaleType.IN&lt;em&gt;SAMPLE&lt;/em&gt;INT) in display options. Or try .imageScaleType(ImageScaleType.EXACTLY).&lt;/li&gt;
&lt;li&gt;Avoid using RoundedBitmapDisplayer. It creates new Bitmap object with ARGB_8888 config for displaying during work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.For memory cache configuration (ImageLoaderConfiguration.memoryCache(...)) you can use already prepared implementations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cache using only strong references:
LruMemoryCache (Least recently used bitmap is deleted when cache size limit is exceeded) - Used by default for API &amp;gt;= 9&lt;/li&gt;
&lt;li&gt;Caches using weak and strong references:
UsingFreqLimitedMemoryCache (Least frequently used bitmap is deleted when cache size limit is exceeded)
LRULimitedMemoryCache (Least recently used bitmap is deleted when cache size limit is exceeded) - Used by default for API &amp;lt; 9
FIFOLimitedMemoryCache (FIFO rule is used for deletion when cache size limit is exceeded)
LargestLimitedMemoryCache (The largest bitmap is deleted when cache size limit is exceeded)
LimitedAgeMemoryCache (Decorator. Cached object is deleted when its age exceeds defined value)&lt;/li&gt;
&lt;li&gt;Cache using only weak references:
WeakMemoryCache (Unlimited cache)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6.For disc cache configuration (ImageLoaderConfiguration.discCache(...)) you can use already prepared implementations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UnlimitedDiscCache (The fastest cache, doesn&amp;#39;t limit cache size) - Used by default&lt;/li&gt;
&lt;li&gt;TotalSizeLimitedDiscCache (Cache limited by total cache size. If cache size exceeds specified limit then file with the most oldest last usage date will be deleted)&lt;/li&gt;
&lt;li&gt;FileCountLimitedDiscCache (Cache limited by file count. If file count in cache directory exceeds specified limit then file with the most oldest last usage date will be deleted. Use it if your cached files are of about the same size.)&lt;/li&gt;
&lt;li&gt;LimitedAgeDiscCache (Size-unlimited cache with limited files&amp;#39; lifetime. If age of cached file exceeds defined limit then it will be deleted from cache.)
&lt;strong&gt;NOTE: UnlimitedDiscCache is 30%-faster than other limited disc cache implementations.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;7.To display bitmap (DisplayImageOptions.displayer(...)) you can use already prepared implementations:
- RoundedBitmapDisplayer (Displays bitmap with rounded corners)
- FadeInBitmapDisplayer (Displays image with &amp;quot;fade in&amp;quot; animation)&lt;/p&gt;

&lt;p&gt;8.To avoid list (grid, ...) scrolling lags you can use PauseOnScrollListener:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;boolean pauseOnScroll = false; // or true
boolean pauseOnFling = true; // or false
PauseOnScrollListener listener = new PauseOnScrollListener(imageLoader, pauseOnScroll, pauseOnFling);
listView.setOnScrollListener(listener);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  
  <entry>
    <title>45个习惯</title>
    <link href="///2013/05/12/sss.html"/>
    <updated>2013-05-12T00:00:00+08:00</updated>
    <id>///2013/05/12/sss</id>
    <content type="html">&lt;h2&gt;态度决定一切&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;做事&lt;/li&gt;
&lt;li&gt;欲速则不达&lt;/li&gt;
&lt;li&gt;对事不对人&lt;/li&gt;
&lt;li&gt;排除万难，奋勇前进&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://pic.yupoo.com/wsyanligang_v/CQJf7rqQ/NkrqN.png&quot; alt=&quot;Car&quot; title=&quot;car&quot;&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>创建属于你自己的3D ListView - Part 1(译)</title>
    <link href="///2013/05/11/custom-adapterview.html"/>
    <updated>2013-05-11T00:00:00+08:00</updated>
    <id>///2013/05/11/custom-adapterview</id>
    <content type="html">&lt;p&gt;原文连接 &lt;a href=&quot;http://developer.sonymobile.com/2010/05/20/android-tutorial-making-your-own-3d-list-part-1/&quot;&gt;Making your own 3D list - Part 1&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;本文是教你如何在安卓应用中做出很酷效果的ListView的教材第一章，我叫Anders Ericson，主要从事UI工作，在Timescape应用中有个就是我做的，你可以在Xperia X10 mini 和 Xperia X10 mini pro中找到.当用户尝试使用一个App时，UI是他们第一个关注的东西,所以我决定做一个教材，使得其他任何安卓开发者可以创建属于他们自己的ListView,类似与在Timescape中的3D感觉和物理特性(dynamics).&lt;/p&gt;

&lt;p&gt;在教材的第一章，我们将创建一个很基础的list，然后在接下去的两章中，越来越多的功能和特性将添加进来。我同时也会教你如何使用list的基本构造，然后改变它使得无论如何工作的都使你的应用做到最好。下面那个链接是第一章的源码，已经为你准备好构建在如Eclipse这样的IDE中。同时不要忘了下载Sony Ericsson Tutorials 应用从Android Market中，你可以尝试使用同样的应用在教材的每一步。我很期待看到你的评论和问题。&lt;/p&gt;

&lt;p&gt;Android中标准的ListView已经支持了很多东西，并且包括了绝大多数的你可以想到的用户事件。但是listview看起来太平淡了，当你想继承它并且做很多事情时，都发现做不到，然后无疾而终。标准ListView的另一个缺点是缺乏好的物理特性（和改变它的能力）。因此，如果你要你的UI看起来不那么普通的话，你要做的仅仅是实现你自己的View.&lt;/p&gt;

&lt;p&gt;因为在一篇文章中写完会有太多的代码，所以我准备分为3部分。第一部分（就是这章）先创建一个基本的List，有太多的东西要去包括，但我想让我们更关注它们在后面几章.第二章，我们将看到listview的外貌改变和一些类3D图像算法。最后一章，我们将改变list的行为并且添加一些物理动力学进去，一些非常能提升外观和感觉的东西。&lt;/p&gt;

&lt;p&gt;虽然这里用到的技术和在X10 Mini上用到的一样，当这篇教材的目的不是仅仅拷贝一个看起来很特殊的list，而是教你实现自己的listview。我很确定你肯定有很多关于你的listview该看起来怎么样，它的行为和它用来干嘛的主意。&lt;/p&gt;

&lt;h3&gt;Hello AdapterView&lt;/h3&gt;

&lt;p&gt;当我们瞄准一个list（能显示其他view）,我们需要继承ViewGroup,更合适的是AdapterView。（原因，或者更多的原因我们不从AbsListView继承，是因为它不允许我们在list上做有活力的效果）。那么，让我们从开始建立安卓项目并且创建一个继承自AdapterView&lt;Adapter&gt; 的 MyListView 开始吧，AdapterView有四个抽象函数我们需要去实现:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getAdapter()&lt;/li&gt;
&lt;li&gt;setAdapter()&lt;/li&gt;
&lt;li&gt;getSelectedView()&lt;/li&gt;
&lt;li&gt;setSelection()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;getAdapter()和setAdapter()直接实现，其他两个现在先仅仅抛出异常.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class MyListView extends AdapterView {
    /** The adapter with all the data */
    private Adapter mAdapter;
    public MyListView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }
    @Override
    public void setAdapter(Adapter adapter) {
        mAdapter = adapter;
        removeAllViewsInLayout();
        requestLayout();
    }
    @Override
    public Adapter getAdapter() {
        return mAdapter;
    }
    @Override
    public void setSelection(int position) {
        throw new UnsupportedOperationException(&amp;quot;Not supported&amp;quot;);
    }
    @Override
    public View getSelectedView() {
        throw new UnsupportedOperationException(&amp;quot;Not supported&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里唯一值得注意的是setAdapter方法。当我们获得一个新的Adapter我们移除之前所有的视图，然后请求一个布局，并且按照adapter放置视图。如果我们现在创建一个activity和带有假数据的adapter，然后使用新视图，我们将得不到任何东西，在屏幕上。这是因为如果我们要在屏幕上得到一些东西，我们需要重写onLayout()方法。&lt;/p&gt;

&lt;h4&gt;显示我们的第一个视图&lt;/h4&gt;

&lt;p&gt;在&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#onLayout(boolean,%20int,%20int,%20int,%20int&quot;&gt;onLayout( )&lt;/a&gt; )中，我们从adpater中获取视图，并且添加他们作为一个子视图。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    super.onLayout(changed, left, top, right, bottom);
    // if we don&amp;#39;t have an adapter, we don&amp;#39;t need to do anything
    if (mAdapter == null) {
        return;
    }
    if (getChildCount() == 0) {
        int position = 0;
        int bottomEdge = 0;
        while (bottomEdge &amp;amp;lt; getHeight() &amp;amp;amp;&amp;amp;amp; position &amp;amp;lt; mAdapter.getCount()) {
            View newBottomChild = mAdapter.getView(position, null, this);
            addAndMeasureChild(newBottomChild);
            bottomEdge += newBottomChild.getMeasuredHeight();
            position++;
        }
    }
    positionItems();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So，What happends hers? 首先执行父调用和空值检查，然后开始真正有用的代码。如果我们还没有添加任何子节点，那么我们就开始那么做。这个while循环直到我们添加足够多的视图覆盖整个屏幕为止。当我们从adapter获得一个视图，我们就把它添加为一个子节点，然后我们需要测量(measure)它，为的是得到它的正确尺寸。当我们添加完所有的视图，我们把它们放置到正确的位置.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;/**
 * Adds a view as a child view and takes care of measuring it
 *
 * @param child The view to add
 */
private void addAndMeasureChild(View child) {
    LayoutParams params = child.getLayoutParams();
    if (params == null) {
        params = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
    }
    addViewInLayout(child, -1, params, true);
    int itemWidth = getWidth();
    child.measure(MeasureSpec.EXACTLY | itemWidth, MeasureSpec.UNSPECIFIED);
}
/**
 * Positions the children at the &amp;amp;quot;correct&amp;amp;quot; positions
 */
private void positionItems() {
    int top = 0;
    for (int index = 0; index &amp;lt; getChildCount(); index++) {
        View child = getChildAt(index);
        int width = child.getMeasuredWidth();
        int height = child.getMeasuredHeight();
        int left = (getWidth() - width) / 2;
        child.layout(left, top, left + width, top + height);
        top += height;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些代码比较简单，自解释，所以我不准备过多描述。虽然我在测量子视图时走了点捷径，但是这些代码在大部分情况下是工作良好的。positioItems()从top（0)开始，然后布局这些子视图，一个挨着一个，没有任何padding。值得注意的是，我们忽略了list可能有的padding.&lt;/p&gt;

&lt;h3&gt;滑动&lt;/h3&gt;

&lt;p&gt;如果现在运行这些代码，我们在屏幕上得到一些东西了。然而，这一点交互的感觉也没有（interactive）。当我们触摸屏幕时它不会滑动，我们也不能点击任何item.要让触摸生效，我们需要重写 onTouchEvent()。&lt;/p&gt;

&lt;p&gt;仅仅使其滑动的触摸逻辑是十分简单的，当我们得到一个按下事件，我们保存下按下事件的位置，和list的位置。我们将使用第一个item的top作为list的位置(position)，当我们获得一个移动事件，我们计算与按下事件的距离，然后根据开始位置和当前位置的距离重新安置list。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;@Override
public boolean onTouchEvent(MotionEvent event) {
    if (getChildCount() == 0) {
        return false;
    }
    switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            mTouchStartY = (int)event.getY();
            mListTopStart = getChildAt(0).getTop();
            break; 
        case MotionEvent.ACTION_MOVE:
            int scrolledDistance = (int)event.getY() - mTouchStartY;
            mListTop = mListTopStart + scrolledDistance;
            requestLayout();
            break;
        default:
            break;
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在list的位置已经由mListTop确定下来了，无论何时它改变了，我实际上只需要请求重新布局就好了。我们之前实现的positionItem()总是从0开始布局。现在我们需要改变它，以至于它能从mListTop开始。&lt;/p&gt;

&lt;p&gt;如果我们现在就去尝试滑动，它会表现的不错，但我们还是能发现一些明显的问题在我们的list中。首先，滑动没有限制，这样我们可以把所有的item滑出屏幕外。我们需要几种限制检查方式去阻止我们那样做。第二，如果我们往下滑，我们只能看到之前已经显示了的item。没有新的item显示出来，即使adapter包含了更多的item。我们现在就修复第二个问题，然后把第一个问题放到下一章再说。&lt;/p&gt;

&lt;h4&gt;处理所有的item&lt;/h4&gt;

&lt;p&gt;之所以在我们滑动式没有新的item出现，原因在于onLayout()这段代码。这段代码只会在没有一个视图未被添加的时候才会添加视图。&lt;strong&gt;(The code there only adds views if no views haven&amp;#39;t already been added.)&lt;/strong&gt; list组件的必要条件之一就是无论它是有10个item还是10,000个item，它都应该工作正常。记住了这点，我们就不能简单地在开始的时候把所有的item从adapter拿出，然后全部添加为子视图，我们需要确定我们能高效地处理这些视图.为了做到高效，我们只需要持有list可见那部分的子视图。如果我们能维持一小块视图的缓存，最好不过了，我们能让adpater重用这些而不是反复的从xml中inflate。&lt;/p&gt;

&lt;p&gt;处理这些问题的地方在onLayout()。新版本的onLayout()看起来像是这样的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    super.onLayout(changed, left, top, right, bottom);
    // if we don&amp;#39;t have an adapter, we don&amp;#39;t need to do anything
    if (mAdapter == null) {
        return;
    }
    if (getChildCount() == 0) {
        mLastItemPosition = -1;
        fillListDown(mListTop);
    } else {
        int offset = mListTop + mListTopOffset - getChildTop(getChildAt(0));
        removeNonVisibleViews(offset);
        fillList(offset);
    }
    positionItems();
    invalidate();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fillListDown()和之前的while循环或多或少是同一个东西。也添加了一个方法做同样的事情，只是它从顶部开始添加，叫做fillListUp()。他们都叫做fillList()。removeNonVisibleViews()把超出可见范围（超出顶部和底部）的视图移除掉。有两个变量被添加进来，为了跟踪视图，确保与adpater连接时在正确的位置：mFirstItemPosition和mLastPosition。它们是当前可见视图的在adpater中第一个和最后一个位置。每当我们移除或者添加一个视图，它都会更新。当滑动中的list滑到第一个可见item的顶部时，我们也需要更新list的位置，每当我们在顶部添加一个新视图或者移除顶部视图时。&lt;/p&gt;

&lt;p&gt;为了弥补positionItems()将上下移动list的事实，我们需要让removeVisibleViews()和fillList()知道到底list移动了多少。这就是偏移变量(offset variable)。否则我们可能不会移除那些执行positionItems()时离开可见区域的items,或者我们可能忘了去添加将变为可见状态的items。当mListTop被定义为第一个item的顶部，即使它不可见，我们也需要跟踪当前第一个可见item到之前第一个item位置的距离。&lt;/p&gt;

&lt;p&gt;如果你之前有实现过一个adapter，你应该知道检测并且使用convertView参数，代替每次从xml中inflat一个新的视图，这种方式来提升性能。现在我们正实现它的另一面，那就是我们将调用getView()而不是实现它，然后我们需要确定我们让adapter重用views。我们需要的是可以重用视图的缓存。标准的ListView支持不同种类的视图，但是现在我们假设所有的item-views是一样的。我们将只使用LinkedList来作为缓存容器.每当我们移除一个子视图时(在 removeNonVisibleViews())我们添加一个到缓存中，每当我们向adapter调用getView是（在fillListDown（）和fillListUp（））时，我们返回一个缓存视图（如果有的话）作为convertView。&lt;/p&gt;

&lt;h3&gt;点击和长按&lt;/h3&gt;

&lt;p&gt;想让list变的有用的，那么就需要让在list中的所有item可以被点击。AdapterView实现了设置OnItemClickListener和OnItemLongClickLstener的方法，我们需要确认在合适的时间调用这些监听器。为了支持点击item的视图，我们需要做三件事情
1. 检测一个点击时间
2. 找出被点击的item
3. 调用监听器（如果设置了），携带正确的参数
那么从顶部开始，并且实现一个点击检测吧。&lt;/p&gt;

&lt;p&gt;Android提供的&lt;a href=&quot;http://developer.android.com/reference/android/view/GestureDetector.html&quot;&gt;GestureDestector&lt;/a&gt;类可以使用，但是我们事实上我不建议使用。其中一个原因是我发现它相当不可靠，特别是长按手势和甩手势。另一个原因是如果你委托手势检测到另一类的话，你可能无法追踪触摸状态，并且想要知道更多关于触摸状态的信息。&lt;/p&gt;

&lt;p&gt;首先，定义一些触摸状态&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;/** User is not touching the list */
private static final int TOUCH_STATE_RESTING = 0;
/** User is touching the list and right now it&amp;#39;s still a &amp;quot;click&amp;quot; */
private static final int TOUCH_STATE_CLICK = 1; 
/** User is scrolling the list */
private static final int TOUCH_STATE_SCROLL = 2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们事前已经重写过了OnTouchEvent()，现在我们将添加一些代码来处理新的状态。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;@Override
 public boolean onTouchEvent(final MotionEvent event) {
     if (getChildCount() == 0) {
         return false;
     }
     switch (event.getAction()) {
         case MotionEvent.ACTION_DOWN:
             startTouch(event);
             break;
         case MotionEvent.ACTION_MOVE:
             if (mTouchState == TOUCH_STATE_CLICK) {
                 startScrollIfNeeded(event);
             }
             if (mTouchState == TOUCH_STATE_SCROLL) {
                 scrollList((int)event.getY() - mTouchStartY);
             }
             break;
         case MotionEvent.ACTION_UP:
             if (mTouchState == TOUCH_STATE_CLICK) {
                 clickChildAt((int)event.getX(), (int)event.getY());
             }
             endTouch();
             break;
         default:
             endTouch();
             break;
     }
     return true;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在添加代码前，这段的大部分是相同的。处理按下事件的代码被重构为一个方法,startTouch()。同时我们将状态改变为TOUCH&lt;em&gt;STATE&lt;/em&gt;CLICK。现在我们不知道用户是要点击或者滑动视图，但是直到我们识别为一个滑动，我们就处理它为一个点击。&lt;/p&gt;

&lt;p&gt;滑动的识别是在startScrollIfNeeded()中处理的，在滑动事件函数（move events）中被调用的那个。比较当前触摸坐标和按下事件的坐标，如果用户手指滑动的距离超出了临界值，那么就改变状态为TOUCH&lt;em&gt;STATE&lt;/em&gt;SCROLL。我使用10px的临界值，效果还不错。你也可以使用ViewConfiguraion类然后调用getScaledTouchSlop()获取的值作为临界值。&lt;/p&gt;

&lt;p&gt;If we are scrolling,then it&amp;#39;s the same code as without the additions for click/state,though it&amp;#39;s now in a separate method.(眼花了).list的顶部被修改，布局被要求重新布置list。&lt;/p&gt;

&lt;p&gt;为了支持点击事件，我们也需要处理好ACTION&lt;em&gt;UP事件，我们还需要确认我们把ACTION&lt;/em&gt;CANCEL和ACTION&lt;em&gt;OUTSIDE事件区分开来。除了按下和移动事件，其他所有的事件我们都需要重置触摸状态为TOUCH&lt;/em&gt;STATE&lt;em&gt;RESTING,已经在endTouch()中调用了，但是唯独ACTION&lt;/em&gt;UP我们需要调用点击监听器。当然，我们只能调用点击监听器，如果我们是在点击状态而不是滑动状态。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;private void clickChildAt(final int x, final int y) {
    final int index = getContainingChildIndex(x, y);
    if (index != INVALID_INDEX) {
        final View itemView = getChildAt(index);
        final int position = mFirstItemPosition + index;
        final long id = mAdapter.getItemId(position);
        performItemClick(itemView, position, id);
    }
}
private int getContainingChildIndex(final int x, final int y) {
    if (mRect == null) {
        mRect = new Rect();
    }
    for (int index = 0; index &amp;amp;lt; getChildCount(); index++) {
        getChildAt(index).getHitRect(mRect);
        if (mRect.contains(x, y)) {
            return index;
        }
    }
    return INVALID_INDEX;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;clickChildAt() is responsible for calling the listener (if any) with the position for the child at the specified coordinates. To find the correct view clickChildAt() uses getContainingChildIndex() which loops through the child views and for each view checks if the coordinates given are contained within the hit-rect of the view or not.&lt;/p&gt;

&lt;p&gt;When we have click handling in place, adding a check for long press is quite simple. A convenient way of checking for a long press is to create a Runnable that calls the long press listener. Then whenever we get a down event we post this Runnable with a delay on the view). Whenever we get an up event or when we switch to scrolling, we know it’s not going to be a long press any more so then we simply remove the Runnable by calling &lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#removeCallbacks(java.lang.Runnable&quot;&gt;removeCallbacks()&lt;/a&gt;). How long to check for a long-press is up to you and the specific view you are implementing, but if it’s not something special, it’s a good idea to use the same delay as the rest of the system. Use &lt;a href=&quot;http://developer.android.com/reference/android/view/ViewConfiguration.html#getLongPressTimeout(&quot;&gt;ViewConfiguration.getLongPressTimeout()&lt;/a&gt;) to get it.&lt;/p&gt;

&lt;p&gt;In order to be able to scroll the list even if the child views respond to touch events, you need to intercept touch events when you want to start scrolling. This is done by overriding &lt;a href=&quot;http://developer.android.com/reference/android/view/ViewGroup.html#onInterceptTouchEvent(android.view.MotionEvent&quot;&gt;onInterceptTouchEvent()&lt;/a&gt;)  which lets us monitor all the touch events passed to our children and lets us, if we want to, intercept the touch events at any point.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;@Override
public boolean onInterceptTouchEvent(final MotionEvent event) {
    switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            startTouch(event);
            return false;
        case MotionEvent.ACTION_MOVE:
            return startScrollIfNeeded(event);
        default:
            endTouch();
            return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implementation of onInterceptTouchEvent() looks quite like onTouchEvent(). If we get a down event, we save the position of the list then return false to let the motion event pass to wherever it’s going. When we get move events, we check if we’ve moved far enough for this to be counted as a scroll move. If we have moved enough, we set the state to scrolling and then we return true to intercept future events.&lt;/p&gt;

&lt;h4&gt;To be continued…&lt;/h4&gt;

&lt;p&gt;What we’ve made so far is a very simple list. We handle views efficiently and a user can scroll it and click and long press items. If we stop here however, we could just as well have used ListView (though we’ve learned a bit about implementing a view group). In the next part of this tutorial, we will take a look at canvas transformations and give the list a more 3D look and after that we will look into the dynamics of the list like bounce and fling effects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.sonymobile.com/downloads/code-example-module/3d-list-sample-project-part-1/&quot;&gt;[Download] 3D List sample project – Part 1 (31kb)&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>追踪运动 (译文)</title>
    <link href="///2013/05/10/movement.html"/>
    <updated>2013-05-10T00:00:00+08:00</updated>
    <id>///2013/05/10/movement</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://developer.android.com/training/gestures/movement.html&quot;&gt;源链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本课程将讨论如何在触摸事件中追踪运动&lt;/p&gt;

&lt;p&gt;一个新的onTouchEvent()是被一个ACTION_MOVE事件触发的，无论何时当前触摸包含位置，压力，或者大小改变。如在Detecting Common Gestures中讨论的，所有的事件被记录在onTouchEvent()中的MotionEvent参数中.&lt;/p&gt;

&lt;p&gt;因为基于手指的触摸不总是精致的交互形式，检测触摸事件经常基于运动而不是单个触点。为了帮助应用区分(distingush)基于运动的手势（如 swipe）和非移动手势（如单击) ,Android包含了“touch slop”概念。Touch slop指的是在这个手势被解释为一个运动手势前， 用户触摸的像素距离。更多的这个主题的讨论，见 Managing Touch Events in a ViewGroup。&lt;/p&gt;

&lt;p&gt;有不同方式去追踪手势运动，取决与你的应用需要，如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个目标的开始与结束（如，移动一个在屏幕上的物体，从点A到点B)&lt;/li&gt;
&lt;li&gt;目标点正运行的方向，通过x和y坐标的方向决定&lt;/li&gt;
&lt;li&gt;History，你可以通过调用MotionEvent的getHistorySize()方法，找到一个手势的History信息。你可以通过MotionEvent的 getHistorical&amp;lt;Value&amp;gt;方法获得每个History事件的位置，大小，时间，压力。History信息对于渲染用户手指的路径(trail)十分有效，如为触摸绘画.参考更多细节MotionEvent。&lt;/li&gt;
&lt;li&gt;目标移过触摸屏幕的速度。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;跟踪速度&lt;/h3&gt;

&lt;p&gt;你可以获得一个简单的基于距离和(或)目标移动方向的运动手势，但是速度通常是在追踪手势特性甚至决定是否一个手势发生的决定性因素 。为了使计算速度更简单，Android提供了VelocityTracker类和VelocityTrackerCompat类在支持包中。VolocityTracker 帮助你追踪触摸事件的速度。对于某些将速度作为部分标准的手势，如扫，这是十分有用的。&lt;/p&gt;

&lt;p&gt;以下这个示例，说明了VelocityTrackerAPI中的方法目的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class MainActivity extends Activity {
    private static final String DEBUG_TAG = &amp;quot;Velocity&amp;quot;;
        ...
    private VelocityTracker mVelocityTracker = null;
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        int index = event.getActionIndex();
        int action = event.getActionMasked();
        int pointerId = event.getPointerId(index);
        switch(action) {
            case MotionEvent.ACTION_DOWN:
                if(mVelocityTracker == null) {
                    // Retrieve a new VelocityTracker object to watch the velocity of a motion.
                    mVelocityTracker = VelocityTracker.obtain();
                }
                else {
                    // Reset the velocity tracker back to its initial state.
                    mVelocityTracker.clear();
                }
                // Add a user&amp;#39;s movement to the tracker.
                mVelocityTracker.addMovement(event);
                break;
            case MotionEvent.ACTION_MOVE:
                mVelocityTracker.addMovement(event);
                // When you want to determine the velocity, call 
                // computeCurrentVelocity(). Then call getXVelocity() 
                // and getYVelocity() to retrieve the velocity for each pointer ID. 
                mVelocityTracker.computeCurrentVelocity(1000);
                // Log velocity of pixels per second
                // Best practice to use VelocityTrackerCompat where possible.
                Log.d(&amp;quot;&amp;quot;, &amp;quot;X velocity: &amp;quot; + 
                        VelocityTrackerCompat.getXVelocity(mVelocityTracker, 
                        pointerId));
                Log.d(&amp;quot;&amp;quot;, &amp;quot;Y velocity: &amp;quot; + 
                        VelocityTrackerCompat.getYVelocity(mVelocityTracker,
                        pointerId));
                break;
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_CANCEL:
                // Return a VelocityTracker object back to be re-used by others.
                mVelocityTracker.recycle();
                break;
        }
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;你需要在ACTION&lt;em&gt;MOVE事件后计算速度，而不是ACTION&lt;/em&gt;UP.如果你ACTION_UP后计算，X和Y速度将是0&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>当ViewPager嵌套在ScrollView/ListView里时，手势冲突如何处理？</title>
    <link href="///2013/05/10/intercept-touchevent.html"/>
    <updated>2013-05-10T00:00:00+08:00</updated>
    <id>///2013/05/10/intercept-touchevent</id>
    <content type="html">&lt;p&gt;有时我们需要将ViewPager嵌套在其他已经含有手势动作的ViewGroup里,如ScrollView,ListView时，会造成手势冲突，如表现为ViewPager向左划时，不小心向上移动了一点距离，ViewPager立刻回弹到原始位置。&lt;/p&gt;

&lt;p&gt;主要问题出在ScrollView/ListView作为ViewPager的ParentView，会先接受到触摸信息，而且他们对上下滑动是会做出拦截动作，并接管触摸信息的向下传递，导致ViewPager滑动异常。
先看一种&lt;a href=&quot;http://justwyy.iteye.com/blog/1567390&quot;&gt;解决方式&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class ScrollViewExtend extends ScrollView {  
    private float xDistance, yDistance, xLast, yLast;  
    public ScrollViewExtend(Context context, AttributeSet attrs) {  
        super(context, attrs);  
    }  
    @Override  
    public boolean onInterceptTouchEvent(MotionEvent ev) {  
        switch (ev.getAction()) {  
            case MotionEvent.ACTION_DOWN:  
                xDistance = yDistance = 0f;  
                xLast = ev.getX();  
                yLast = ev.getY();  
                break;  
            case MotionEvent.ACTION_MOVE:  
                final float curX = ev.getX();  
                final float curY = ev.getY();             
                xDistance += Math.abs(curX - xLast);  
                yDistance += Math.abs(curY - yLast);  
                xLast = curX;  
                yLast = curY;  
                if(xDistance &amp;gt; yDistance){  
                    return false;  
                }    
        }  
        return super.onInterceptTouchEvent(ev);  
    }  
}   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方式的确可以解决这个问题，但是其实Google已经提供了一个函数来解决ParentView与ChildView手势冲突的问题。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public void requestDisallowInterceptTouchEvent(boolean disallowIntercept)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由ViewPager在OnTouch/onInterceptTouchEvent，dispatchTouchEvent中调用即可。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>ACTION_MASK 是用来干嘛的？</title>
    <link href="///2013/05/10/action_mask.html"/>
    <updated>2013-05-10T00:00:00+08:00</updated>
    <id>///2013/05/10/action_mask</id>
    <content type="html">&lt;p&gt;我们经常可以看到这样的代码&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;int action=event.getAction();
switch(action&amp;amp;MotionEvent.ACTION_MASK){
    // balabala
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从字面上理解，即为动作与上动作掩码.看下这些常量的值&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;ACTION_MASK             0x000000ff
ACTION_DOWN             0x00000000
ACTION_UP               0x00000001  
ACTION_MOVE             0x00000002 
ACTION_POINTER_DOWN     0x00000005 
ACTION_POINTER_UP       0x00000006 
ACTION_POINTER_1_DOWN   0x00000005            
ACTION_POINTER_1_UP     0x00000006   
ACTION_POINTER_2_DOWN   0x00000105   
ACTION_POINTER_2_UP     0x00000106 
ACTION_POINTER_3_DOWN   0x00000205           
ACTION_POINTER_3_UP     0x00000206 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们发现单指DOWN/UP分别为 0x005和0x006,
而双值和三指DOWN/UP分别为 0x105和0x106,0x205和0x206&lt;/p&gt;

&lt;p&gt;假设当前触摸动作为ACTION&lt;em&gt;POINTER&lt;/em&gt;2_DOWN时，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;int action=0x105;
int maskAction=0x0ff&amp;amp;0x105; //  maskAction=0x005;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如此，触摸动作含义改变为ACTION&lt;em&gt;POINTER&lt;/em&gt;DOWN&lt;/p&gt;

&lt;p&gt;总结，Android在很多需要性能的地方都采用了这种传入int类型，再加掩码操作。如onMeasure。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>检测常见的手势 （译文）</title>
    <link href="///2013/05/10/Detecting-Common-Gestures.html"/>
    <updated>2013-05-10T00:00:00+08:00</updated>
    <id>///2013/05/10/Detecting-Common-Gestures</id>
    <content type="html">&lt;p&gt;一个触摸手势发生在一个用户将一个或多个手指放在触摸屏上，然后你的应用将这些触摸事件(pattern)翻译为一个具体的手势。有两个相应的阶段去作手势检测:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;收集关于触摸事件的数据.&lt;/li&gt;
&lt;li&gt;解释(interperting)这些数据，看它是否符合你的应用程序所支持的手势的标准(criteria).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;支持包/类&lt;/h3&gt;

&lt;p&gt;本课程中的示例使用了GestureDetectorCompat 和MotionEventCompat 类.这些类在支持包中.当可能需要在Android 1.6或者更高的系统中使用时，你应该使用支持包。注意，MotionEventCompat &lt;em&gt;不是&lt;/em&gt; MotionEvent类的替代版。相反，它提供了多种静态方法 ，为了接收已经结合事件的期望动作，传递你的MotionEvent对象。&lt;/p&gt;

&lt;h3&gt;收集数据&lt;/h3&gt;

&lt;p&gt;当用户将一个或多个手指放在屏幕上，在可接收触摸事件的视图上触发回调函数 onTouchEvent().对于每个触摸事件序列(位置，压力，大小，另一个手指的添加等),最终确定为一个手势，onTouchEvent()会多次调用(fired)&lt;/p&gt;

&lt;p&gt;当用户第一次接触屏幕时，手势开始，系统追踪用户手指的位置，手势也跟着继续，直到捕获用户的手指离开屏幕时结束。始终相互作用，传递(delivered)到onTouchEvent()的MotionEvent提供了每个交互的细节。你的应用可以使用这些提供了MotionEvent的数据去决定是否一个手势动作发生了值得去关注。&lt;/p&gt;

&lt;h3&gt;在Activity或者View中捕获触摸事件&lt;/h3&gt;

&lt;p&gt;重载onTouchEvent()回调函数，以拦截触摸事件在Activity或者View&lt;/p&gt;

&lt;p&gt;以下片段使用了getActionMasked()去提取用户从eventParameter执行的动作。它提供给你原始数据，由你决定是否一个手势是你关心发生的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class MainActivity extends Activity {
// This example shows an Activity, but you would use the same approach if
// you were subclassing a View.
@Override
public boolean onTouchEvent(MotionEvent event){ 
    int action = MotionEventCompat.getActionMasked(event);
    switch(action) {
        case (MotionEvent.ACTION_DOWN) :
            Log.d(DEBUG_TAG,&amp;quot;Action was DOWN&amp;quot;);
            return true;
        case (MotionEvent.ACTION_MOVE) :
            Log.d(DEBUG_TAG,&amp;quot;Action was MOVE&amp;quot;);
            return true;
        case (MotionEvent.ACTION_UP) :
            Log.d(DEBUG_TAG,&amp;quot;Action was UP&amp;quot;);
            return true;
        case (MotionEvent.ACTION_CANCEL) :
            Log.d(DEBUG_TAG,&amp;quot;Action was CANCEL&amp;quot;);
            return true;
        case (MotionEvent.ACTION_OUTSIDE) :
            Log.d(DEBUG_TAG,&amp;quot;Movement occurred outside bounds &amp;quot; +
                    &amp;quot;of current screen element&amp;quot;);
            return true;      
        default : 
            return super.onTouchEvent(event);
    }      
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后你可以做你自己的处理在这些事件上，去决定一个手势是否发生。当你需要做一个定制的手势时，这是必须要做的过程。然而，如果你的应用使用常用的手势如双击，长按，扫等等，你可以使用GestureDetector类的优势。GestureDetector将事情简化，它不需要你自己处理个别的触摸时间就可以检测常见的手势.见讨论&lt;a href=&quot;http://developer.android.com/training/gestures/detector.html#detect&quot;&gt;Detect Gestures&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;在单个View中捕获触摸事件&lt;/h3&gt;

&lt;p&gt;作为OnTouchEvent()的代替，你可以使用setOnTouchListener()方法将一个View.OnTouchListener依附(attach)到任何View对象上去。它使得我们无需子类化一个已经存在的View，而可以去监听触摸事件。例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;View myView = findViewById(R.id.my_view); 
myView.setOnTouchListener(new OnTouchListener() {
    public boolean onTouch(View v, MotionEvent event) {
        // ... Respond to touch events       
        return true;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你创建了一个监听器，在处理ACTION&lt;em&gt;DOWN事件后返回 false ，你需要注意了。如果你这么做了，这个监听器将接收不到随后的ACTION&lt;/em&gt;MOVE和ACTION&lt;em&gt;UP 事件（String of events)。这是因为ACTION&lt;/em&gt;DOWN是所有触摸事件的触发点。&lt;/p&gt;

&lt;p&gt;如果你创建了一个定制View，你可以重载onTouchEvent()，如以上讨论的。&lt;/p&gt;

&lt;h3&gt;检测手势&lt;/h3&gt;

&lt;p&gt;Android提供了GestureDetector类来检测通用手势，它支持了一些手势在onDown(),onLongPress(),onFling()等方法中。你可以结合OnTouchEvent()使用GestureDetector，如刚才讨论的。&lt;/p&gt;

&lt;h3&gt;检测所有支持的手势&lt;/h3&gt;

&lt;p&gt;当你实例化一个GestureDetectorCompat对象时，其中一个参数需要实现GestureDetector.OnGestureListener接口。GestureDetector.OnGestureListener通知用户何时一个特定的触摸事件发生。为了使你的GestureDetector对象可以接收事件，你需要重载View或者Activity的OnTouchEvent()方法，然后沿着所有被观察的事件传递到检测实例。&lt;/p&gt;

&lt;p&gt;接下来的片段中，一个返回true的特定on&amp;lt;TouchEvent&amp;gt;意味着你已经处理了触摸时间。返回false则通过视图栈向下传递事件，直到触摸被成功处理。&lt;/p&gt;

&lt;p&gt;执行下面的代码，感受下当你与屏幕互动(interact)时，动作是如何被触发的，以及每个触摸事件中MotionEvent的内容。你将会了解即使是单个交互动作有多少数据生产。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class MainActivity extends Activity implements 
        GestureDetector.OnGestureListener,
        GestureDetector.OnDoubleTapListener{
    private static final String DEBUG_TAG = &amp;quot;Gestures&amp;quot;;
    private GestureDetectorCompat mDetector; 
    // Called when the activity is first created. 
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        // Instantiate the gesture detector with the
        // application context and an implementation of
        // GestureDetector.OnGestureListener
        mDetector = new GestureDetectorCompat(this,this);
        // Set the gesture detector as the double tap
        // listener.
        mDetector.setOnDoubleTapListener(this);
    }
    @Override 
    public boolean onTouchEvent(MotionEvent event){ 
        this.mDetector.onTouchEvent(event);
        // Be sure to call the superclass implementation
        return super.onTouchEvent(event);
    }
    @Override
    public boolean onDown(MotionEvent event) { 
        Log.d(DEBUG_TAG,&amp;quot;onDown: &amp;quot; + event.toString()); 
        return true;
    }
    @Override
    public boolean onFling(MotionEvent event1, MotionEvent event2, 
            float velocityX, float velocityY) {
        Log.d(DEBUG_TAG, &amp;quot;onFling: &amp;quot; + event1.toString()+event2.toString());
        return true;
    }
    @Override
    public void onLongPress(MotionEvent event) {
        Log.d(DEBUG_TAG, &amp;quot;onLongPress: &amp;quot; + event.toString()); 
    }
    @Override
    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
            float distanceY) {
        Log.d(DEBUG_TAG, &amp;quot;onScroll: &amp;quot; + e1.toString()+e2.toString());
        return true;
    }
    @Override
    public void onShowPress(MotionEvent event) {
        Log.d(DEBUG_TAG, &amp;quot;onShowPress: &amp;quot; + event.toString());
    }
    @Override
    public boolean onSingleTapUp(MotionEvent event) {
        Log.d(DEBUG_TAG, &amp;quot;onSingleTapUp: &amp;quot; + event.toString());
        return true;
    }
    @Override
    public boolean onDoubleTap(MotionEvent event) {
        Log.d(DEBUG_TAG, &amp;quot;onDoubleTap: &amp;quot; + event.toString());
        return true;
    }
    @Override
    public boolean onDoubleTapEvent(MotionEvent event) {
        Log.d(DEBUG_TAG, &amp;quot;onDoubleTapEvent: &amp;quot; + event.toString());
        return true;
    }
    @Override
    public boolean onSingleTapConfirmed(MotionEvent event) {
        Log.d(DEBUG_TAG, &amp;quot;onSingleTapConfirmed: &amp;quot; + event.toString());
        return true;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;检测一个被支持手势的子集&lt;/h3&gt;

&lt;p&gt;如果你只是想要处理小部分的手势，你可以继承GestureDetector.SimpleOnGestureListener ，而不是GestureDetector.OnGestureListener接口。&lt;/p&gt;

&lt;p&gt;GestureDetector.SimpleOnGestureListener 提供所有On&amp;lt;TouchEvent&amp;gt;方法返回false的实现.因此你可以只重载你所关心的方法。例如，接下来的片段创建了一个继承GestureDetector.SimpleOnGestureListener类，重载了OnFling()和OnDown();&lt;/p&gt;

&lt;p&gt;无论你是否使用GestureDetector.OnGestureListener，这是一个最佳实践(best practice)去实现一个返回true的 onDown()方法。因为所有的手势开始与一个onDown()信息。如果你在onDown()返回false，GestureDetector.SimpleOnGestureListener只做默认动作，系统假定你要忽视手势的剩余部分(rest)，然后GestureDetector.OnGestureListener的其他方法将永远不会被调用。这可能是在你应用中的一个潜在异常(potential)。除非你真的是要忽略手势，你才应该返回false.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot;&gt;public class MainActivity extends Activity { 
    private GestureDetectorCompat mDetector; 
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mDetector = new GestureDetectorCompat(this, new MyGestureListener());
    }
    @Override 
    public boolean onTouchEvent(MotionEvent event){ 
        this.mDetector.onTouchEvent(event);
        return super.onTouchEvent(event);
    }
    class MyGestureListener extends GestureDetector.SimpleOnGestureListener {
        private static final String DEBUG_TAG = &amp;quot;Gestures&amp;quot;; 
        @Override
        public boolean onDown(MotionEvent event) { 
            Log.d(DEBUG_TAG,&amp;quot;onDown: &amp;quot; + event.toString()); 
            return true;
        }
        @Override
        public boolean onFling(MotionEvent event1, MotionEvent event2, 
                float velocityX, float velocityY) {
            Log.d(DEBUG_TAG, &amp;quot;onFling: &amp;quot; + event1.toString()+event2.toString());
            return true;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  

</feed>
